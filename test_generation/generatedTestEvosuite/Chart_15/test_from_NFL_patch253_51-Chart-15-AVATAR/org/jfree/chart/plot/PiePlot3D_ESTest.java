/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:50:22 GMT 2021
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PiePlot3D_ESTest extends PiePlot3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      arc2D_Float0.setAngleStart((double) 10);
      Area area0 = new Area();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      piePlot3D0.drawSide(graphics2D0, (Rectangle2D) null, arc2D_Float0, area0, area0, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, false);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertFalse(piePlot3D0.getDarkerSides());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      piePlot3D0.setDarkerSides(true);
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, (Rectangle2D) null, arc2D_Float0, area0, area0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, jFreeChart0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, false);
      assertTrue(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(jDBCCategoryDataset0);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 10);
      PiePlot3D piePlot3D0 = new PiePlot3D(categoryToPieDataset0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setDepthFactor((-1249.79558069));
      double double0 = piePlot3D0.getDepthFactor();
      assertEquals((-1249.79558069), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertFalse(piePlot3D0.getDarkerSides());
      
      piePlot3D0.setDarkerSides(true);
      boolean boolean0 = piePlot3D0.getDarkerSides();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      Area area0 = new Area();
      // Undeclared exception!
      try { 
        piePlot3D0.drawSide(graphics2D0, (Rectangle2D) null, arc2D_Float0, area0, area0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, (Stroke) null, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.getDarkerSides();
      assertFalse(boolean0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setDarkerSides(true);
      PiePlot3D piePlot3D1 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertFalse(boolean0);
      assertTrue(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PiePlot3D piePlot3D1 = new PiePlot3D();
      piePlot3D1.setDepthFactor((-3895.9387914763547));
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertEquals((-3895.9387914763547), piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PiePlot3D piePlot3D1 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertTrue(boolean0);
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isCircular());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.equals(piePlot3D0);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(boolean0);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.equals((Object) null);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(boolean0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1315, 3590, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      arc2D_Float0.setAngleExtent(3590);
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, (Rectangle2D) null, arc2D_Float0, area0, area0, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, false);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      arc2D_Float0.setAngleExtent(809.1500244140625);
      Area area0 = new Area();
      float[] floatArray0 = new float[4];
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, (RenderingHints) null);
      Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Float0, area0, area0, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, false);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      arc2D_Float0.setAngleExtent(15);
      Area area0 = new Area();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Stroke stroke0 = areaRenderer0.getBaseOutlineStroke();
      // Undeclared exception!
      try { 
        piePlot3D0.drawSide(graphics2D0, (Rectangle2D) null, arc2D_Float0, area0, area0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, stroke0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      arc2D_Float0.setAngleExtent(1.0F);
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, (Rectangle2D) null, arc2D_Float0, area0, area0, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, jFreeChart0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, false);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      arc2D_Float0.setAngleExtent(2048.220615622582);
      Area area0 = new Area();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-3.625362222809159));
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getStringBounds("Pie_3D_Plot", fontRenderContext0);
      Paint paint0 = piePlot3D0.getLabelPaint();
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Float0, area0, area0, paint0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, true, true);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      arc2D_Float0.setAngleExtent(809.1500244140625);
      Area area0 = new Area();
      float[] floatArray0 = new float[4];
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, (RenderingHints) null);
      Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Float0, area0, area0, (Paint) null, jFreeChart0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, true);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertFalse(piePlot3D0.getDarkerSides());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      piePlot3D0.setDarkerSides(true);
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, (Rectangle2D) null, arc2D_Float0, area0, area0, (Paint) null, jFreeChart0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, false);
      assertTrue(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertFalse(piePlot3D0.getDarkerSides());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      piePlot3D0.setDarkerSides(true);
      Area area0 = new Area();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      piePlot3D0.drawSide(graphics2D0, (Rectangle2D) null, arc2D_Float0, area0, area0, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, false);
      assertTrue(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getPlotType();
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      double double0 = piePlot3D0.getDepthFactor();
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, double0, 0.01);
      assertFalse(piePlot3D0.isCircular());
  }
}

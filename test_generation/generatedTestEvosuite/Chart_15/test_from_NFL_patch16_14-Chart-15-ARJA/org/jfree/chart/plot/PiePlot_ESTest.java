/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:38:19 GMT 2021
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ComponentColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.io.ObjectInputStream;
import java.io.StringWriter;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.TextStyle;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JEditorPane;
import javax.swing.JTextPane;
import javax.swing.plaf.synth.SynthListUI;
import javax.swing.text.ComponentView;
import javax.swing.text.Element;
import javax.swing.text.PlainDocument;
import javax.swing.text.StringContent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.PieToolTipGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieToolTipGenerator;
import org.jfree.chart.plot.AbstractPieLabelDistributor;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PieLabelDistributor;
import org.jfree.chart.plot.PieLabelRecord;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PiePlotState;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.urls.CustomPieURLGenerator;
import org.jfree.chart.urls.PieURLGenerator;
import org.jfree.chart.urls.StandardPieURLGenerator;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.SerialUtilities;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PiePlot_ESTest extends PiePlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      piePlot0.getLegendItems();
      piePlot0.getLegendLabelGenerator();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 10);
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.08, 1.0F, 0.08, (-1047.401504847));
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getArcBounds(rectangle2D_Double0, rectangle2D_Double0, 0.4, (-1436.96070151738), 0.08);
      piePlot0.clone();
      System.setCurrentTimeMillis(10);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      PiePlot piePlot0 = new PiePlot();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Ymfs(Zb@F", spiderWebPlot0.DEFAULT_LABEL_FONT, piePlot3D0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1696.882558600797), 10, 0.18, 90.0);
      piePlot3D0.getArcBounds(rectangle2D_Double0, rectangle2D_Double0, (-1696.882558600797), 0.0025, (-4160.59740627));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setBaseSectionPaint(piePlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      PiePlot3D piePlot3D1 = new PiePlot3D();
      piePlot0.getBaseSectionOutlineStroke();
      PiePlot3D piePlot3D2 = new PiePlot3D();
      piePlot0.setSimpleLabelOffset(piePlot3D0.DEFAULT_INSETS);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setBaseSectionPaint(piePlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      PiePlot3D piePlot3D1 = new PiePlot3D();
      piePlot0.getBaseSectionOutlineStroke();
      PiePlot3D piePlot3D2 = new PiePlot3D();
      RectangleInsets rectangleInsets0 = PeriodAxisLabelInfo.DEFAULT_INSETS;
      piePlot0.setSimpleLabelOffset(rectangleInsets0);
      piePlot3D1.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      System.setCurrentTimeMillis((-1593L));
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      StandardPieToolTipGenerator standardPieToolTipGenerator0 = new StandardPieToolTipGenerator("bxDCjV`&,P=G");
      standardPieToolTipGenerator0.clone();
      piePlot0.setExplodePercent("{0}: ({1}, {2})", (-3830.021850128739));
      AxisChangeEvent axisChangeEvent0 = null;
      try {
        axisChangeEvent0 = new AxisChangeEvent((Axis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultCategoryDataset0);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      JFreeChart jFreeChart0 = new JFreeChart("<Z_&MEn%$(5o", (Font) null, multiplePiePlot0, false);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(multiplePiePlot0);
      jFreeChart0.plotChanged(plotChangeEvent0);
      multiplePiePlot0.addChangeListener(jFreeChart0);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-4215));
      PiePlot piePlot0 = new PiePlot(categoryToPieDataset0);
      piePlot0.getLabelLinkMargin();
      piePlot0.getLabelPadding();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      Font font0 = spiderWebPlot0.getLabelFont();
      piePlot0.setLabelFont(font0);
      piePlot0.getLegendLabelToolTipGenerator();
      piePlot0.getLabelPadding();
      piePlot0.getLegendLabelURLGenerator();
      piePlot0.getShadowPaint();
      piePlot0.setExplodePercent((-1.0), 1.0F);
      piePlot0.getLabelShadowPaint();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.getSimpleLabelOffset();
      StandardPieToolTipGenerator standardPieToolTipGenerator0 = new StandardPieToolTipGenerator();
      standardPieToolTipGenerator0.clone();
      piePlot0.setToolTipGenerator(standardPieToolTipGenerator0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Paint paint0 = categoryAxis3D0.getTickLabelPaint();
      piePlot0.setNoDataMessagePaint(paint0);
      piePlot0.getLabelFont();
      piePlot0.getShadowYOffset();
      piePlot0.getStartAngle();
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      piePlot0.lookupSectionOutlineStroke(regularTimePeriod1, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot3D0.getLabelDistributor();
      piePlot3D0.setLabelDistributor(abstractPieLabelDistributor0);
      piePlot3D0.getDirection();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      Stroke stroke0 = piePlot3D0.getBaseSectionOutlineStroke();
      piePlot3D0.getLabelShadowPaint();
      piePlot3D0.getLabelFont();
      piePlot3D0.getLabelShadowPaint();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot1.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      jFreeChart0.setBackgroundImageAlpha(1.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(10, 1, chartRenderingInfo0);
      piePlot3D0.equals(stroke0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      piePlot0.setBackgroundImageAlignment(10);
      PiePlot3D piePlot3D1 = new PiePlot3D(jDBCPieDataset0);
      jDBCPieDataset0.removeChangeListener(piePlot3D0);
      PiePlot3D piePlot3D2 = new PiePlot3D();
      piePlot3D2.setLabelPaint(piePlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      piePlot3D1.getMaximumExplodePercent();
      piePlot3D0.getBaseSectionOutlineStroke();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      piePlot3D0.setDataset(defaultPieDataset0);
      AffineTransform.getShearInstance(1.0E-5, 0.08);
      PiePlot3D piePlot3D1 = new PiePlot3D();
      piePlot3D0.getMaximumExplodePercent();
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator("I){x[");
      PiePlot3D piePlot3D2 = new PiePlot3D();
      piePlot3D1.setLabelOutlinePaint(piePlot3D0.DEFAULT_OUTLINE_PAINT);
      PiePlot3D piePlot3D3 = new PiePlot3D(jDBCPieDataset0);
      jDBCPieDataset0.removeChangeListener(piePlot3D0);
      piePlot3D3.getMaximumExplodePercent();
      piePlot3D2.setLabelPaint(piePlot3D3.DEFAULT_BACKGROUND_PAINT);
      piePlot3D0.getMaximumExplodePercent();
      piePlot3D1.getBaseSectionOutlineStroke();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getMaximumLabelWidth();
      TextBox textBox0 = new TextBox();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 1);
      PiePlot3D piePlot3D0 = new PiePlot3D(categoryToPieDataset0);
      piePlot3D0.setBackgroundImageAlignment((-4076));
      piePlot3D0.getDirection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.setWebFilled(true);
      spiderWebPlot0.getSeriesOutlineStroke((-2146073023));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      multiplePiePlot0.getPieChart();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, piePlot3D0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3836, 180, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 10;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) (-2146073023);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(1, (-2146073023), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      System.setCurrentTimeMillis((-1593L));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, (-520602097));
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0E-5, 10, 2.0, 2.0);
      PiePlot3D piePlot3D0 = new PiePlot3D(categoryToPieDataset0);
      piePlot3D0.getArcBounds(rectangle2D_Double0, rectangle2D_Double0, 1.0F, 1248.34650424285, 10);
      Font font0 = Font.decode("");
      JFreeChart jFreeChart0 = new JFreeChart("", font0, piePlot3D0, true);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.getItemContainer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 159068260, 4097.44665260535, 0.4, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(10, 0.5F);
      Range range0 = null;
      try {
        range0 = new Range(2500000.0, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2500000.0) <= upper (1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setBaseSectionPaint(piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT);
      PiePlot3D piePlot3D1 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("?Rur,Aj'&yW", piePlot3D0.DEFAULT_LABEL_FONT, piePlot3D0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 15, 800);
      piePlot3D1.getArcBounds(rectangle2D_Double0, rectangle2D_Double0, 0.0025, 0.08, 151.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PiePlot3D piePlot3D2 = new PiePlot3D();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("PRINT", "org.jfree.chart.plot.PiePlot", "?Rur,Aj'&yW", "ZOOM_DOMAIN_BOTH");
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // No suitable driver found for PRINT
         //
         verifyException("java.sql.DriverManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot(jDBCPieDataset0);
      piePlot0.getBaseSectionOutlinePaint();
      RingPlot ringPlot0 = new RingPlot(jDBCPieDataset0);
      ringPlot0.getStartAngle();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      piePlot3D0.getSectionOutlinePaint(10);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation((-490));
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      PlotOrientation plotOrientation1 = PlotOrientation.HORIZONTAL;
      Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation1);
      ringPlot0.setMaximumLabelWidth((-490));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ringPlot0.setInteriorGap(0.0);
      piePlot0.getMaximumExplodePercent();
      ringPlot0.getBaseSectionOutlineStroke();
      RingPlot ringPlot1 = new RingPlot();
      ringPlot1.getSectionPaint(10);
      piePlot3D0.getDataset();
      Graphics2D graphics2D0 = null;
      PiePlotState piePlotState0 = null;
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(10);
      // Undeclared exception!
      try { 
        pieLabelDistributor0.getPieLabelRecord(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      piePlot3D0.getSectionOutlinePaint(10);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(1696);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      StandardPieToolTipGenerator standardPieToolTipGenerator0 = new StandardPieToolTipGenerator("Duplicate items in 'columnKeys'.", locale0);
      standardPieToolTipGenerator0.clone();
      piePlot3D0.setExplodePercent(1.0F, (-852.5400903250174));
      AxisChangeEvent axisChangeEvent0 = null;
      try {
        axisChangeEvent0 = new AxisChangeEvent((Axis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PiePlot3D piePlot3D1 = new PiePlot3D();
      PiePlot3D piePlot3D2 = new PiePlot3D();
      piePlot3D1.lookupSectionOutlinePaint(10);
      PiePlot3D piePlot3D3 = new PiePlot3D();
      AffineTransform.getShearInstance(0.4, 3082.702406);
      PiePlot3D piePlot3D4 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      defaultPieDataset0.setValue((Comparable) 90.0, 25.5);
      piePlot3D0.setDataset(defaultPieDataset0);
      AffineTransform.getShearInstance(1.0E-5, 0.08);
      PiePlot3D piePlot3D1 = new PiePlot3D();
      piePlot3D0.getMaximumExplodePercent();
      piePlot3D1.setLabelPaint(piePlot3D0.DEFAULT_OUTLINE_PAINT);
      // Undeclared exception!
      try { 
        piePlot3D1.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PieLabelDistributor pieLabelDistributor0 = (PieLabelDistributor)piePlot3D0.getLabelDistributor();
      pieLabelDistributor0.sort();
      piePlot3D0.setLabelDistributor(pieLabelDistributor0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      defaultPieDataset1.setValue((Comparable) 10, (double) 10);
      piePlot3D0.setDataset(defaultPieDataset1);
      AffineTransform.getShearInstance(25.0, 0.08);
      PiePlot3D piePlot3D1 = new PiePlot3D();
      piePlot3D0.getMaximumExplodePercent();
      piePlot3D1.setLabelPaint(piePlot3D0.DEFAULT_LABEL_PAINT);
      piePlot3D0.getMaximumExplodePercent();
      piePlot3D0.getBaseSectionOutlineStroke();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setBaseSectionPaint(piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT);
      PiePlot3D piePlot3D1 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("?Rur,Aj'&yW", piePlot3D0.DEFAULT_LABEL_FONT, piePlot3D0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
      piePlot3D1.getArcBounds(rectangle2D0, rectangle2D0, 0.0025, 0.08, 151.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)CategoryPlot.DEFAULT_GRIDLINE_PAINT;
      piePlot3D1.setLabelLinkPaint(combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "=?;yeTh~RmNv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      // Undeclared exception!
      try { 
        piePlot3D0.setBaseSectionPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getLegendItems();
      Color.getColor("", (-2145385625));
      PiePlot3D piePlot3D1 = new PiePlot3D();
      Color.getColor("", 10);
      Color.getColor("", 10);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      piePlot3D1.setInteriorGap(0.4);
      piePlot3D1.setLabelLinkMargin(2986.739972);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D2 = new PiePlot3D();
      piePlot3D1.setBaseSectionOutlineStroke(piePlot3D0.DEFAULT_LABEL_OUTLINE_STROKE);
      // Undeclared exception!
      try { 
        SerialUtilities.readShape((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      Paint paint0 = meterPlot0.getNeedlePaint();
      piePlot0.setNoDataMessagePaint(paint0);
      piePlot0.getIgnoreZeroValues();
      piePlot0.lookupSectionPaint(10);
      String string0 = "org.jfree.chart.plot.PiePlot";
      Locale locale0 = Locale.PRC;
      NumberFormat.getCurrencyInstance(locale0);
      double double0 = (-81.301541);
      String string1 = "{9";
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("{9", dateFormatSymbols0);
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      MockDate mockDate0 = new MockDate(10);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{9");
      textStyle0.asStandalone();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer1 = mockSimpleDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      // Undeclared exception!
      try { 
        mockSimpleDateFormat0.format((Object) textStyle0, stringBuffer1, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setBaseSectionPaint(piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis3D0);
      piePlot3D0.getLabelLinkMargin();
      piePlot3D0.getIgnoreNullValues();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      PiePlot piePlot1 = new PiePlot();
      piePlot1.getLabelDistributor();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.setWebFilled(true);
      spiderWebPlot0.getSeriesOutlineStroke(10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      piePlot3D0.setSectionOutlineStroke(1.0F, piePlot0.DEFAULT_LABEL_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D1 = new PiePlot3D(defaultPieDataset0);
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D1.setLabelLinkPaint(piePlot3D0.DEFAULT_LABEL_PAINT);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.isCircular());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setMinimumArcAngleToDraw(1.0F);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D1.lookupSectionOutlineStroke(10);
      assertNotNull(basicStroke0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      int int0 = piePlot3D1.getPieIndex();
      assertEquals(0, int0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.isCircular());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke1 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      assertNotNull(basicStroke1);
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertNotSame(basicStroke1, basicStroke0);
      
      piePlot3D1.setBaseSectionOutlineStroke(basicStroke1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertNotSame(basicStroke1, basicStroke0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PiePlot3D piePlot3D2 = new PiePlot3D(defaultPieDataset0);
      assertNotNull(piePlot3D2);
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.getDarkerSides());
      assertNull(piePlot3D2.getNoDataMessage());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D2.setLabelFont(piePlot3D0.DEFAULT_LABEL_FONT);
      assertFalse(piePlot3D0.equals((Object)piePlot3D2));
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.getDarkerSides());
      assertNull(piePlot3D2.getNoDataMessage());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertNotSame(piePlot3D0, piePlot3D2);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PiePlot3D piePlot3D3 = new PiePlot3D();
      assertNotNull(piePlot3D3);
      assertTrue(piePlot3D3.equals((Object)piePlot3D2));
      assertFalse(piePlot3D3.equals((Object)piePlot3D0));
      assertFalse(piePlot3D3.equals((Object)piePlot3D1));
      assertEquals(1.0F, piePlot3D3.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D3.isOutlineVisible());
      assertEquals(0, piePlot3D3.getPieIndex());
      assertFalse(piePlot3D3.getSimpleLabels());
      assertEquals(0.025, piePlot3D3.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D3.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D3.getLabelLinksVisible());
      assertFalse(piePlot3D3.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D3.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D3.getInteriorGap(), 0.01);
      assertFalse(piePlot3D3.getIgnoreNullValues());
      assertFalse(piePlot3D3.getDarkerSides());
      assertEquals(0.5F, piePlot3D3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D3.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D3.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D3.getNoDataMessage());
      assertFalse(piePlot3D3.isCircular());
      assertEquals(15, piePlot3D3.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D3.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D3.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D3.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D3.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D3.isSubplot());
      assertEquals(0.12, piePlot3D3.getDepthFactor(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      piePlot3D3.setLabelOutlineStroke(piePlot3D0.DEFAULT_OUTLINE_STROKE);
      assertFalse(piePlot3D0.equals((Object)piePlot3D3));
      assertFalse(piePlot3D0.equals((Object)piePlot3D2));
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D3.equals((Object)piePlot3D2));
      assertFalse(piePlot3D3.equals((Object)piePlot3D0));
      assertFalse(piePlot3D3.equals((Object)piePlot3D1));
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, piePlot3D3.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D3.isOutlineVisible());
      assertEquals(0, piePlot3D3.getPieIndex());
      assertFalse(piePlot3D3.getSimpleLabels());
      assertEquals(0.025, piePlot3D3.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D3.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D3.getLabelLinksVisible());
      assertFalse(piePlot3D3.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D3.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D3.getInteriorGap(), 0.01);
      assertFalse(piePlot3D3.getIgnoreNullValues());
      assertFalse(piePlot3D3.getDarkerSides());
      assertEquals(0.5F, piePlot3D3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D3.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D3.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D3.getNoDataMessage());
      assertFalse(piePlot3D3.isCircular());
      assertEquals(15, piePlot3D3.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D3.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D3.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D3.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D3.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D3.isSubplot());
      assertEquals(0.12, piePlot3D3.getDepthFactor(), 0.01);
      assertNotSame(piePlot3D0, piePlot3D3);
      assertNotSame(piePlot3D0, piePlot3D2);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D3, piePlot3D0);
      assertNotSame(piePlot3D3, piePlot3D1);
      assertNotSame(piePlot3D3, piePlot3D2);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      double double0 = piePlot3D2.getLabelLinkMargin();
      assertEquals(0.025, double0, 0.01);
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertTrue(piePlot3D2.equals((Object)piePlot3D3));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.getDarkerSides());
      assertNull(piePlot3D2.getNoDataMessage());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertNotSame(piePlot3D2, piePlot3D3);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color0 = (Color)piePlot3D1.getLabelOutlinePaint();
      assertNotNull(color0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D2));
      assertFalse(piePlot3D1.equals((Object)piePlot3D3));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.isCircular());
      assertNotSame(piePlot3D1, piePlot3D2);
      assertNotSame(piePlot3D1, piePlot3D3);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setSectionOutlineStroke(10, basicStroke0);
      assertFalse(piePlot3D0.equals((Object)piePlot3D3));
      assertFalse(piePlot3D0.equals((Object)piePlot3D2));
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D1.equals((Object)piePlot3D2));
      assertFalse(piePlot3D1.equals((Object)piePlot3D3));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(basicStroke0.equals((Object)basicStroke1));
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotSame(piePlot3D0, piePlot3D3);
      assertNotSame(piePlot3D0, piePlot3D2);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D2);
      assertNotSame(piePlot3D1, piePlot3D3);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertNotSame(basicStroke0, basicStroke1);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot3D0.getLabelDistributor();
      assertNotNull(abstractPieLabelDistributor0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setLabelDistributor(abstractPieLabelDistributor0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      Rotation rotation0 = piePlot3D0.getDirection();
      assertNotNull(rotation0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertNotNull(spiderWebPlot0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      spiderWebPlot0.setDataset(defaultIntervalCategoryDataset0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      spiderWebPlot0.setWebFilled(true);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)spiderWebPlot0.getSeriesOutlineStroke(10);
      assertNotNull(basicStroke0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setLabelLinkStroke(basicStroke0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke1 = (BasicStroke)piePlot3D0.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke1);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertSame(basicStroke1, basicStroke0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      Color color0 = (Color)piePlot3D0.getLabelShadowPaint();
      assertNotNull(color0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(3, color0.getTransparency());
      assertEquals(151, color0.getBlue());
      assertEquals(151, color0.getGreen());
      assertEquals(128, color0.getAlpha());
      assertEquals(151, color0.getRed());
      assertEquals((-2137548905), color0.getRGB());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      Color color1 = (Color)piePlot3D0.getLabelShadowPaint();
      assertNotNull(color1);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(128, color1.getAlpha());
      assertEquals(3, color1.getTransparency());
      assertEquals(151, color1.getBlue());
      assertEquals(151, color1.getGreen());
      assertEquals(151, color1.getRed());
      assertEquals((-2137548905), color1.getRGB());
      assertSame(color1, color0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      assertNotNull(multiplePiePlot1);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertTrue(multiplePiePlot1.isOutlineVisible());
      assertFalse(multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot1.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertTrue(multiplePiePlot1.isOutlineVisible());
      assertFalse(multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      jFreeChart0.setBackgroundImageAlpha(1.0F);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertTrue(multiplePiePlot1.isOutlineVisible());
      assertFalse(multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertTrue(multiplePiePlot1.isOutlineVisible());
      assertFalse(multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot3D0.setLabelLinkPaint(spiderWebPlot0.DEFAULT_LABEL_SHADOW_PAINT);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      boolean boolean0 = piePlot3D0.equals(basicStroke1);
      assertFalse(boolean0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertSame(basicStroke1, basicStroke0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      
      piePlot3D0.setLabelPadding(rectangleInsets0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      SystemColor systemColor0 = SystemColor.controlText;
      assertNotNull(systemColor0);
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(0, systemColor0.getBlue());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      
      Color color0 = Color.getColor("Null 'padding' argument.", 10);
      assertNotNull(color0);
      assertEquals(10, color0.getBlue());
      assertEquals((-16777206), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      
      piePlot3D0.setBackgroundAlpha(10);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(10.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color1 = Color.DARK_GRAY;
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      assertEquals(64, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(64, color1.getRed());
      assertEquals((-12566464), color1.getRGB());
      assertEquals(64, color1.getBlue());
      assertNotSame(color1, color0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, (-2145385625));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2145385625), categoryToPieDataset0.getExtractIndex());
      
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2145385625), categoryToPieDataset0.getExtractIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2145385625), categoryToPieDataset0.getExtractIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Comparable comparable0 = ringPlot0.getSectionKey((-2145385625));
      assertNotNull(comparable0);
      assertEquals((-2145385625), comparable0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2145385625), categoryToPieDataset0.getExtractIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RingPlot ringPlot1 = new RingPlot();
      assertNotNull(ringPlot1);
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(0, ringPlot1.getPieIndex());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      double double0 = ringPlot0.getStartAngle();
      assertEquals(90.0, double0, 0.01);
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2145385625), categoryToPieDataset0.getExtractIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNotSame(ringPlot0, ringPlot1);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      GradientPaint gradientPaint0 = new GradientPaint(1.0F, (-2145385625), systemColor0, 1.0F, 10, systemColor0);
      assertNotNull(gradientPaint0);
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(0, systemColor0.getBlue());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(1, gradientPaint0.getTransparency());
      assertFalse(gradientPaint0.isCyclic());
      
      RingPlot ringPlot2 = new RingPlot();
      assertNotNull(ringPlot2);
      assertTrue(ringPlot2.equals((Object)ringPlot1));
      assertTrue(ringPlot2.equals((Object)ringPlot0));
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.025, ringPlot2.getLabelGap(), 0.01);
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot2.isOutlineVisible());
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot2.getPieIndex());
      assertFalse(ringPlot2.isSubplot());
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      double double1 = ringPlot0.getShadowXOffset();
      assertEquals(4.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(ringPlot0.equals((Object)ringPlot2));
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2145385625), categoryToPieDataset0.getExtractIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(ringPlot0, ringPlot2);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      ringPlot2.setIgnoreZeroValues(true);
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertFalse(ringPlot2.equals((Object)ringPlot1));
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.025, ringPlot2.getLabelGap(), 0.01);
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot2.isOutlineVisible());
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot2.getPieIndex());
      assertFalse(ringPlot2.isSubplot());
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot2.getIgnoreZeroValues());
      assertNotSame(ringPlot2, ringPlot0);
      assertNotSame(ringPlot2, ringPlot1);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      ringPlot1.setLabelGap(0.08);
      assertFalse(ringPlot1.equals((Object)ringPlot2));
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertTrue(ringPlot1.isCircular());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(0, ringPlot1.getPieIndex());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertNotSame(ringPlot1, ringPlot2);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RingPlot ringPlot3 = new RingPlot(categoryToPieDataset0);
      assertNotNull(ringPlot3);
      assertFalse(ringPlot3.equals((Object)ringPlot1));
      assertTrue(ringPlot3.equals((Object)ringPlot0));
      assertFalse(ringPlot3.equals((Object)ringPlot2));
      assertEquals(90.0, ringPlot3.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot3.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot3.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot3.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot3.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot3.getSectionOutlinesVisible());
      assertTrue(ringPlot3.isOutlineVisible());
      assertFalse(ringPlot3.isSubplot());
      assertEquals(0.2, ringPlot3.getSectionDepth(), 0.01);
      assertTrue(ringPlot3.getLabelLinksVisible());
      assertFalse(ringPlot3.getSimpleLabels());
      assertEquals(0.025, ringPlot3.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot3.getIgnoreNullValues());
      assertEquals(0.025, ringPlot3.getLabelGap(), 0.01);
      assertEquals(0, ringPlot3.getPieIndex());
      assertFalse(ringPlot3.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot3.getInteriorGap(), 0.01);
      assertNull(ringPlot3.getNoDataMessage());
      assertEquals(0.5F, ringPlot3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot3.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot3.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot3.getShadowXOffset(), 0.01);
      assertTrue(ringPlot3.getSeparatorsVisible());
      assertTrue(ringPlot3.isCircular());
      assertEquals(1.0F, ringPlot3.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2145385625), categoryToPieDataset0.getExtractIndex());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot1.setSectionOutlinePaint(0.08, ringPlot2.DEFAULT_LABEL_OUTLINE_PAINT);
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertFalse(ringPlot2.equals((Object)ringPlot3));
      assertFalse(ringPlot2.equals((Object)ringPlot1));
      assertFalse(ringPlot1.equals((Object)ringPlot3));
      assertFalse(ringPlot1.equals((Object)ringPlot2));
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.025, ringPlot2.getLabelGap(), 0.01);
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot2.isOutlineVisible());
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot2.getPieIndex());
      assertFalse(ringPlot2.isSubplot());
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot2.getIgnoreZeroValues());
      assertTrue(ringPlot1.isCircular());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(0, ringPlot1.getPieIndex());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertNotSame(ringPlot2, ringPlot0);
      assertNotSame(ringPlot2, ringPlot3);
      assertNotSame(ringPlot2, ringPlot1);
      assertNotSame(ringPlot1, ringPlot3);
      assertNotSame(ringPlot1, ringPlot2);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Color color2 = (Color)ringPlot3.getLabelShadowPaint();
      assertNotNull(color2);
      assertFalse(ringPlot3.equals((Object)ringPlot1));
      assertTrue(ringPlot3.equals((Object)ringPlot0));
      assertFalse(ringPlot3.equals((Object)ringPlot2));
      assertFalse(color2.equals((Object)color1));
      assertFalse(color2.equals((Object)color0));
      assertEquals(90.0, ringPlot3.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot3.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot3.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot3.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot3.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot3.getSectionOutlinesVisible());
      assertTrue(ringPlot3.isOutlineVisible());
      assertFalse(ringPlot3.isSubplot());
      assertEquals(0.2, ringPlot3.getSectionDepth(), 0.01);
      assertTrue(ringPlot3.getLabelLinksVisible());
      assertFalse(ringPlot3.getSimpleLabels());
      assertEquals(0.025, ringPlot3.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot3.getIgnoreNullValues());
      assertEquals(0.025, ringPlot3.getLabelGap(), 0.01);
      assertEquals(0, ringPlot3.getPieIndex());
      assertFalse(ringPlot3.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot3.getInteriorGap(), 0.01);
      assertNull(ringPlot3.getNoDataMessage());
      assertEquals(0.5F, ringPlot3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot3.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot3.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot3.getShadowXOffset(), 0.01);
      assertTrue(ringPlot3.getSeparatorsVisible());
      assertTrue(ringPlot3.isCircular());
      assertEquals(1.0F, ringPlot3.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(128, color2.getAlpha());
      assertEquals(3, color2.getTransparency());
      assertEquals(151, color2.getBlue());
      assertEquals(151, color2.getGreen());
      assertEquals((-2137548905), color2.getRGB());
      assertEquals(151, color2.getRed());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2145385625), categoryToPieDataset0.getExtractIndex());
      assertNotSame(ringPlot3, ringPlot1);
      assertNotSame(ringPlot3, ringPlot2);
      assertNotSame(ringPlot3, ringPlot0);
      assertNotSame(color2, color1);
      assertNotSame(color2, color0);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color3 = (Color)ringPlot2.getLabelLinkPaint();
      assertNotNull(color3);
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertFalse(ringPlot2.equals((Object)ringPlot3));
      assertFalse(ringPlot2.equals((Object)ringPlot1));
      assertFalse(color3.equals((Object)color0));
      assertFalse(color3.equals((Object)color1));
      assertFalse(color3.equals((Object)color2));
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.025, ringPlot2.getLabelGap(), 0.01);
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot2.isOutlineVisible());
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot2.getPieIndex());
      assertFalse(ringPlot2.isSubplot());
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot2.getIgnoreZeroValues());
      assertEquals(255, color3.getAlpha());
      assertEquals((-16777216), color3.getRGB());
      assertEquals(0, color3.getGreen());
      assertEquals(0, color3.getBlue());
      assertEquals(0, color3.getRed());
      assertEquals(1, color3.getTransparency());
      assertNotSame(ringPlot2, ringPlot0);
      assertNotSame(ringPlot2, ringPlot3);
      assertNotSame(ringPlot2, ringPlot1);
      assertNotSame(color3, color0);
      assertNotSame(color3, color1);
      assertNotSame(color3, color2);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      piePlot3D0.setDataset(defaultPieDataset0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AffineTransform affineTransform0 = AffineTransform.getShearInstance(1.0E-5, 0.08);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.9999992, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.08, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0E-5, affineTransform0.getShearX(), 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)ringPlot0.getLabelPaint();
      assertNotNull(color0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      double double0 = ringPlot0.getInteriorGap();
      assertEquals(0.08, double0, 0.01);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(90.0);
      assertNotNull(basicStroke0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot3D0.getLabelDistributor();
      assertNotNull(abstractPieLabelDistributor0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setLabelDistributor(abstractPieLabelDistributor0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Rotation rotation0 = piePlot3D0.getDirection();
      assertNotNull(rotation0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertNotNull(spiderWebPlot0);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      
      piePlot3D0.setBaseSectionPaint(spiderWebPlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.lookupSectionOutlineStroke(0.4);
      assertNotNull(basicStroke0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      double double0 = piePlot3D0.getExplodePercent((-1.0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double0 = ringPlot0.getMaximumLabelWidth();
      assertEquals(0.14, double0, 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      TextBox textBox0 = new TextBox();
      assertNotNull(textBox0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(0.4, 0.4, 0.14, textBox0, 1759.4, 1.0E-5, 302.38357);
      assertNotNull(pieLabelRecord0);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(879.84, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-879.5600000000001), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(1759.4, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(1.0E-5, pieLabelRecord0.getGap(), 0.01);
      assertEquals(302.38357, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(0.4, pieLabelRecord0.getAngle(), 0.01);
      
      double double1 = ringPlot0.getExplodePercent(pieLabelRecord0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(879.84, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-879.5600000000001), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(1759.4, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(1.0E-5, pieLabelRecord0.getGap(), 0.01);
      assertEquals(302.38357, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(0.4, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      
      ringPlot0.setBaseSectionOutlinePaint(color0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Stroke stroke0 = ringPlot0.getSectionOutlineStroke(pieLabelRecord0);
      assertNull(stroke0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(879.84, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals((-879.5600000000001), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(1759.4, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals(1.0E-5, pieLabelRecord0.getGap(), 0.01);
      assertEquals(302.38357, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(0.4, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double2 = ringPlot0.getStartAngle();
      assertEquals(90.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      int int0 = (-43);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-43), (-43), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-43) and height (-43) must be > 0
         //
         verifyException("java.awt.image.SampleModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ringPlot0.setLabelLinkMargin((-1521.364));
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color0 = Color.getColor((String) null, 10);
      assertNotNull(color0);
      assertEquals(10, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777206), color0.getRGB());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      // Undeclared exception!
      try { 
        piePlot3D0.getArcBounds(rectangle2D_Double0, (Rectangle2D) null, 1.0F, (-1022.57495), 151);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Arc2D$Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2378.4);
      assertNotNull(candlestickRenderer0);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(2378.4, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      Color color1 = Color.getColor("W~!yT;#wb|*", 2);
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      assertEquals(0, color1.getRed());
      assertEquals(2, color1.getBlue());
      assertEquals((-16777214), color1.getRGB());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertNotSame(color1, color0);
      
      Font font0 = candlestickRenderer0.getSeriesItemLabelFont(972);
      assertNull(font0);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(2378.4, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      // Undeclared exception!
      try { 
        piePlot3D0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color0 = (Color)CategoryPlot.DEFAULT_GRIDLINE_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      
      piePlot3D0.setLabelLinkPaint(piePlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator("I){x[");
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("I){x[", standardPieSectionLabelGenerator0.getLabelFormat());
      
      piePlot3D0.setLegendLabelGenerator(standardPieSectionLabelGenerator0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals("I){x[", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D1 = new PiePlot3D(defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setLabelFont(piePlot3D1.DEFAULT_LABEL_FONT);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      AffineTransform affineTransform0 = AffineTransform.getShearInstance(2.5E-6, 1.0F);
      assertNotNull(affineTransform0);
      assertEquals(2.5E-6, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.9999975, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      
      PiePlot3D piePlot3D2 = new PiePlot3D();
      assertNotNull(piePlot3D2);
      assertTrue(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertFalse(piePlot3D2.isSubplot());
      assertNull(piePlot3D2.getNoDataMessage());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot3D piePlot3D3 = new PiePlot3D();
      assertNotNull(piePlot3D3);
      assertFalse(piePlot3D3.equals((Object)piePlot3D0));
      assertTrue(piePlot3D3.equals((Object)piePlot3D2));
      assertTrue(piePlot3D3.equals((Object)piePlot3D1));
      assertEquals(0.08, piePlot3D3.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D3.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D3.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D3.getDarkerSides());
      assertEquals(0.5F, piePlot3D3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D3.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D3.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D3.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D3.getPieIndex());
      assertEquals(4.0, piePlot3D3.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D3.getSimpleLabels());
      assertTrue(piePlot3D3.isOutlineVisible());
      assertFalse(piePlot3D3.isSubplot());
      assertFalse(piePlot3D3.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D3.getDepthFactor(), 0.01);
      assertTrue(piePlot3D3.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D3.getBackgroundImageAlignment());
      assertFalse(piePlot3D3.getIgnoreZeroValues());
      assertNull(piePlot3D3.getNoDataMessage());
      assertEquals(90.0, piePlot3D3.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D3.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D3.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D3.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D3.isCircular());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        piePlot3D3.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Color color0 = Color.getColor("", 10);
      assertNotNull(color0);
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(10, color0.getBlue());
      assertEquals((-16777206), color0.getRGB());
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color1 = Color.getColor("", 10);
      assertNotNull(color1);
      assertTrue(color1.equals((Object)color0));
      assertEquals(0, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(10, color1.getBlue());
      assertEquals((-16777206), color1.getRGB());
      assertNotSame(color1, color0);
      
      Color color2 = Color.getColor("c,", 151);
      assertNotNull(color2);
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      assertEquals(0, color2.getGreen());
      assertEquals(255, color2.getAlpha());
      assertEquals(1, color2.getTransparency());
      assertEquals((-16777065), color2.getRGB());
      assertEquals(0, color2.getRed());
      assertEquals(151, color2.getBlue());
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds((Rectangle2D) null, rectangle2D_Double0, 151, 1.0E-5, 0.0);
      assertNull(rectangle2D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D1 = new PiePlot3D(jDBCPieDataset0);
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D1.setLabelLinkPaint(piePlot0.DEFAULT_LABEL_SHADOW_PAINT);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D1.setMinimumArcAngleToDraw((-710.9409940905259));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals((-710.9409940905259), piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D1.lookupSectionOutlineStroke(0.0);
      assertNotNull(basicStroke0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals((-710.9409940905259), piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      int int0 = piePlot3D0.getPieIndex();
      assertEquals(0, int0);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BasicStroke basicStroke1 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      assertNotNull(basicStroke1);
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertEquals(0.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke1.getEndCap());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertNotSame(basicStroke1, basicStroke0);
      
      piePlot3D0.setBaseSectionOutlineStroke(piePlot3D1.DEFAULT_OUTLINE_STROKE);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals((-710.9409940905259), piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PiePlot3D piePlot3D2 = new PiePlot3D(jDBCPieDataset0);
      assertNotNull(piePlot3D2);
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertTrue(piePlot3D2.equals((Object)piePlot3D0));
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D2.setLabelFont(piePlot3D1.DEFAULT_LABEL_FONT);
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertTrue(piePlot3D2.equals((Object)piePlot3D0));
      assertFalse(piePlot3D1.equals((Object)piePlot3D2));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals((-710.9409940905259), piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertNotSame(piePlot3D1, piePlot3D2);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D2.setLabelOutlineStroke(piePlot3D0.DEFAULT_LABEL_OUTLINE_STROKE);
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertTrue(piePlot3D2.equals((Object)piePlot3D0));
      assertTrue(piePlot3D0.equals((Object)piePlot3D2));
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D0, piePlot3D2);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ComponentColorModel componentColorModel0 = null;
      try {
        componentColorModel0 = new ComponentColorModel((ColorSpace) null, false, false, 151, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown data type 10
         //
         verifyException("java.awt.image.DataBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AffineTransform affineTransform0 = AffineTransform.getShearInstance(10, 1.0E-5);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(10.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0E-5, affineTransform0.getShearY(), 0.01);
      assertEquals(0.9999, affineTransform0.getDeterminant(), 0.01);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation(10);
      assertNotNull(axisLocation0);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      float[][] floatArray0 = new float[3][3];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) 10;
      floatArray1[1] = (-2691.2625F);
      floatArray1[2] = (float) 10;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 10;
      floatArray2[1] = (float) 10;
      floatArray0[1] = floatArray2;
      piePlot3D0.setShadowXOffset(25.5);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(25.5, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      float[] floatArray3 = new float[2];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 10;
      floatArray3[1] = 1.0F;
      floatArray0[2] = floatArray3;
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, dateAxis0, dateAxis0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      jTextPane0.write(stringWriter0);
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals("", stringWriter0.toString());
      
      boolean boolean0 = piePlot0.getSectionOutlinesVisible();
      assertTrue(boolean0);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot0.setLabelLinkMargin(10);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(10.0, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      piePlot0.setShadowXOffset(0);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(10.0, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot0.setBaseSectionOutlineStroke(piePlot3D0.DEFAULT_OUTLINE_STROKE);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(10.0, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      // Undeclared exception!
      try { 
        piePlot3D0.setLegendLabelGenerator((PieSectionLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot3D0.getLabelDistributor();
      assertNotNull(abstractPieLabelDistributor0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Rotation rotation0 = piePlot3D0.getDirection();
      assertNotNull(rotation0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertNotNull(spiderWebPlot0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      
      spiderWebPlot0.setDirection(rotation0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      
      piePlot3D0.setBaseSectionPaint(spiderWebPlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      
      piePlot3D0.setLabelLinksVisible(false);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      double double0 = piePlot3D0.getExplodePercent((-1.0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      double double1 = piePlot3D0.getShadowYOffset();
      assertEquals(4.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Color color0 = Color.yellow;
      assertNotNull(color0);
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      
      SystemColor systemColor0 = SystemColor.info;
      assertNotNull(systemColor0);
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getRed());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-2039808), systemColor0.getRGB());
      
      Paint[] paintArray0 = new Paint[8];
      paintArray0[3] = (Paint) color0;
      Stroke[] strokeArray0 = new Stroke[5];
      Shape[] shapeArray0 = new Shape[5];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, strokeArray0, strokeArray0, shapeArray0);
      assertNotNull(defaultDrawingSupplier0);
      assertEquals(8, paintArray0.length);
      assertEquals(5, strokeArray0.length);
      assertEquals(5, shapeArray0.length);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      assertNotNull(ringPlot0);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      ringPlot0.setDrawingSupplier(defaultDrawingSupplier0);
      assertEquals(8, paintArray0.length);
      assertEquals(5, strokeArray0.length);
      assertEquals(5, shapeArray0.length);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      ringPlot0.setMaximumLabelWidth(0.4);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.4, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertNotNull(ringPlot1);
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.4, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot1.isCircular());
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.4, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertFalse(ringPlot1.getSimpleLabels());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      double double0 = ringPlot0.getLabelGap();
      assertEquals(0.025, double0, 0.01);
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.4, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNotSame(ringPlot0, ringPlot1);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      double double1 = ringPlot0.getShadowYOffset();
      assertEquals(4.0, double1, 0.01);
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.4, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNotSame(ringPlot0, ringPlot1);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      assertNotNull(multiplePiePlot0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 10);
      assertNotNull(categoryToPieDataset0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PieSectionLabelGenerator pieSectionLabelGenerator0 = ringPlot0.getLegendLabelToolTipGenerator();
      assertNull(pieSectionLabelGenerator0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setBaseSectionPaint(piePlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.isSubplot());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      PiePlot3D piePlot3D2 = new PiePlot3D();
      assertNotNull(piePlot3D2);
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertTrue(piePlot3D2.equals((Object)piePlot3D1));
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertFalse(piePlot3D2.isCircular());
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D2.isSubplot());
      assertEquals(0, piePlot3D2.getPieIndex());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot3D2.setBaseSectionOutlineStroke(piePlot0.DEFAULT_LABEL_OUTLINE_STROKE);
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertTrue(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertFalse(piePlot3D2.isCircular());
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D2.isSubplot());
      assertEquals(0, piePlot3D2.getPieIndex());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getDarkerSides());
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Locale locale0 = new Locale(":M.Nl$b");
      assertNotNull(locale0);
      assertEquals(":m.nl$b", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(":m.nl$b", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator(":M.Nl$b", locale0);
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals(":m.nl$b", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(":m.nl$b", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(":M.Nl$b", standardPieSectionLabelGenerator0.getLabelFormat());
      
      PieSectionLabelGenerator pieSectionLabelGenerator0 = piePlot0.getLegendLabelToolTipGenerator();
      assertNull(pieSectionLabelGenerator0);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        piePlot3D0.setLegendLabelGenerator((PieSectionLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setBaseSectionPaint(piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 10);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      
      piePlot3D1.setMinimumArcAngleToDraw(151.0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(151.0, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)piePlot3D1.lookupSectionOutlinePaint(1.0F);
      assertNotNull(color0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(151.0, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      PiePlot3D piePlot3D2 = new PiePlot3D();
      assertNotNull(piePlot3D2);
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(0, piePlot3D2.getPieIndex());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PiePlot piePlot0 = new PiePlot(categoryToPieDataset0);
      assertNotNull(piePlot0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      double double0 = piePlot0.getMaximumExplodePercent();
      assertEquals(0.0, double0, 0.01);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D2.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(0, piePlot3D2.getPieIndex());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Color color1 = (Color)piePlot3D2.getLabelOutlinePaint();
      assertNotNull(color1);
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertFalse(color1.equals((Object)color0));
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(0, piePlot3D2.getPieIndex());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertNotSame(color1, color0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PieURLGenerator pieURLGenerator0 = piePlot0.getLegendLabelURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      assertNotNull(jFreeChart0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      piePlot0.addChangeListener(jFreeChart0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertNotNull(stackedAreaRenderer0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      
      Color color0 = (Color)stackedAreaRenderer0.getBaseOutlinePaint();
      assertNotNull(color0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      piePlot0.setBaseSectionOutlinePaint(color0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      boolean boolean0 = piePlot0.getSimpleLabels();
      assertFalse(boolean0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color1 = (Color)piePlot0.getLabelOutlinePaint();
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertNotSame(color1, color0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Font font0 = piePlot0.getLabelFont();
      assertNotNull(font0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(15, (-1022.57495), 1.0E-5);
      assertNotNull(affineTransform0);
      assertEquals((-1.0), affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01);
      assertEquals((-1022.57494), affineTransform0.getTranslateY(), 0.01);
      assertEquals((-1022.5749599999999), affineTransform0.getTranslateX(), 0.01);
      
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, 1);
      assertNotNull(affineTransformOp0);
      assertEquals((-1.0), affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getScaleX(), 0.01);
      assertEquals((-1022.57494), affineTransform0.getTranslateY(), 0.01);
      assertEquals((-1022.5749599999999), affineTransform0.getTranslateX(), 0.01);
      assertEquals(1, affineTransformOp0.getInterpolationType());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 10;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-428.9984F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 0.5F;
      JFreeChart jFreeChart1 = new JFreeChart(piePlot0);
      assertNotNull(jFreeChart1);
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.isNotify());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RenderingHints renderingHints0 = jFreeChart1.getRenderingHints();
      assertNotNull(renderingHints0);
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.isNotify());
      assertFalse(jFreeChart1.isBorderVisible());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertNotSame(jFreeChart1, jFreeChart0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      assertNotNull(rescaleOp0);
      assertEquals(6, floatArray0.length);
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.getAntiAlias());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertTrue(jFreeChart1.isNotify());
      assertFalse(jFreeChart1.isBorderVisible());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertEquals(6, rescaleOp0.getNumFactors());
      assertArrayEquals(new float[] {10.0F, 10.0F, 1.0F, (-428.9984F), 1.0F, 0.5F}, floatArray0, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      int int0 = (-1004);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-1004), 10, (byte[]) null, 1729, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot3D0.getLabelDistributor();
      assertNotNull(abstractPieLabelDistributor0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D0.setLabelDistributor(abstractPieLabelDistributor0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D0.setBackgroundImageAlignment(10);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(10, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Rotation rotation0 = piePlot3D0.getDirection();
      assertNotNull(rotation0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(10, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertNotNull(spiderWebPlot0);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "U";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      spiderWebPlot0.setDataset(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      spiderWebPlot0.setWebFilled(true);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)spiderWebPlot0.getSeriesOutlineStroke(10);
      assertNotNull(basicStroke0);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        piePlot3D0.getArcBounds((Rectangle2D) null, (Rectangle2D) null, 1.0F, 82.2542778637, (-1022.57495));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Arc2D$Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setBaseSectionPaint(piePlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D1.lookupSectionOutlineStroke(10);
      assertNotNull(basicStroke0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot3D0.setSimpleLabels(true);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setLabelBackgroundPaint(piePlot3D1.DEFAULT_LABEL_PAINT);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot0.setInteriorGap(2.5E-6);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2.5E-6, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("C-g$c42O``(I~YY", "C-g$c42O``(I~YY", "C-g$c42O``(I~YY", "C-g$c42O``(I~YY");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Color color0 = Color.getColor("", 10);
      assertNotNull(color0);
      assertEquals((-16777206), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(10, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color1 = Color.getColor("", 10);
      assertNotNull(color1);
      assertTrue(color1.equals((Object)color0));
      assertEquals(10, color1.getBlue());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals((-16777206), color1.getRGB());
      assertEquals(0, color1.getRed());
      assertNotSame(color1, color0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      
      // Undeclared exception!
      try { 
        piePlot0.setInteriorGap(151);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (151.0) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertTrue(jTextPane0.isFocusCycleRoot());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      // Undeclared exception!
      try { 
        piePlot3D0.setLegendLabelGenerator((PieSectionLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setBaseSectionPaint(piePlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot3D1.getDarkerSides());
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PiePlot3D piePlot3D2 = new PiePlot3D();
      assertNotNull(piePlot3D2);
      assertTrue(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertFalse(piePlot3D2.isSubplot());
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(0, piePlot3D2.getPieIndex());
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.getDarkerSides());
      assertNull(piePlot3D2.getNoDataMessage());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      piePlot3D2.setBaseSectionOutlineStroke(piePlot0.DEFAULT_LABEL_OUTLINE_STROKE);
      assertTrue(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertFalse(piePlot3D2.isSubplot());
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(0, piePlot3D2.getPieIndex());
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.getDarkerSides());
      assertNull(piePlot3D2.getNoDataMessage());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      // Undeclared exception!
      try { 
        piePlot3D1.setLegendLabelGenerator((PieSectionLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setLabelLinksVisible(false);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color0 = (Color)CategoryPlot.DEFAULT_GRIDLINE_PAINT;
      assertNotNull(color0);
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      
      piePlot3D0.setLabelLinkPaint(piePlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator("I){x[");
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("I){x[", standardPieSectionLabelGenerator0.getLabelFormat());
      
      piePlot3D0.setLegendLabelGenerator(standardPieSectionLabelGenerator0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals("I){x[", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D1 = new PiePlot3D(defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D1.getDarkerSides());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D0.setLabelFont(piePlot3D1.DEFAULT_LABEL_FONT);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D1.getDarkerSides());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      double double0 = piePlot3D1.getMaximumExplodePercent();
      assertEquals(0.0, double0, 0.01);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D1.getDarkerSides());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D1.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D1.getDarkerSides());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      RectangleInsets rectangleInsets0 = piePlot3D1.getLabelPadding();
      assertNotNull(rectangleInsets0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D1.getDarkerSides());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Graphics2D graphics2D0 = null;
      PiePlotState piePlotState0 = null;
      PieLabelRecord pieLabelRecord0 = null;
      // Undeclared exception!
      try { 
        piePlot3D0.drawLeftLabel((Graphics2D) null, (PiePlotState) null, (PieLabelRecord) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Rotation rotation0 = piePlot3D0.getDirection();
      assertNotNull(rotation0);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot3D1.setDirection(rotation0);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D1.lookupSectionOutlineStroke(10);
      assertNotNull(basicStroke0);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color0 = (Color)piePlot3D0.getBaseSectionOutlinePaint();
      assertNotNull(color0);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      ringPlot0.setLabelLinkMargin((-1521.364));
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      Rotation rotation0 = Rotation.ANTICLOCKWISE;
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getFactor(), 0.01);
      assertEquals("Rotation.ANTICLOCKWISE", rotation0.toString());
      
      ringPlot0.setDirection(rotation0);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0, rotation0.getFactor(), 0.01);
      assertEquals("Rotation.ANTICLOCKWISE", rotation0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      RectangleInsets rectangleInsets0 = ringPlot0.getLabelPadding();
      assertNotNull(rectangleInsets0);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      boolean boolean0 = ringPlot0.getSimpleLabels();
      assertFalse(boolean0);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      double double0 = ringPlot0.getLabelGap();
      assertEquals(0.025, double0, 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      short[][] shortArray0 = new short[3][3];
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short) (-344);
      shortArray1[1] = (short) (-7490);
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[4];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (-344);
      shortArray2[1] = (short) (-344);
      shortArray2[2] = (short)2;
      shortArray2[3] = (short) (-7490);
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[8];
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      
      shortArray3[0] = (short) (-7490);
      shortArray3[1] = (short) (-344);
      shortArray3[2] = (short)3836;
      shortArray3[3] = (short) (-344);
      shortArray3[4] = (short) (-344);
      shortArray3[5] = (short)2;
      shortArray3[6] = (short) (-7490);
      shortArray3[7] = (short)2;
      shortArray0[2] = shortArray3;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(10, shortArray0);
      assertNotNull(shortLookupTable0);
      assertEquals(3, shortArray0.length);
      assertEquals(10, shortLookupTable0.getOffset());
      assertEquals(3, shortLookupTable0.getNumComponents());
      
      JFreeChart jFreeChart0 = new JFreeChart(ringPlot0);
      assertNotNull(jFreeChart0);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertNotNull(renderingHints0);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      assertNotNull(lookupOp0);
      assertEquals(3, shortArray0.length);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(10, shortLookupTable0.getOffset());
      assertEquals(3, shortLookupTable0.getNumComponents());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)25;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)25;
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)25;
      byteArray1[3] = (byte)70;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((short) (-344), 1, byteArray0, byteArray1, byteArray0, 710);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)piePlot0.lookupSectionPaint("{0}");
      assertNotNull(color0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot0.setLabelPaint(color0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot0.setLabelLinkMargin((-2156.27135498278));
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals((-2156.27135498278), piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D0.setBaseSectionOutlineStroke(piePlot0.DEFAULT_OUTLINE_STROKE);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals((-2156.27135498278), piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      // Undeclared exception!
      try { 
        SerialUtilities.readShape((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot3D0.setBaseSectionPaint(piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Color color0 = (Color)piePlot3D0.getLabelPaint();
      assertNotNull(color0);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      boolean boolean0 = piePlot3D0.getSimpleLabels();
      assertFalse(boolean0);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      SystemColor systemColor0 = SystemColor.activeCaption;
      assertNotNull(systemColor0);
      assertEquals(128, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777088), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset1);
      assertNotNull(ringPlot0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("Multiple Pie Plot", ",Ys", "");
      assertNotNull(standardPieURLGenerator0);
      
      ringPlot0.setLegendLabelURLGenerator(standardPieURLGenerator0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double0 = ringPlot0.getStartAngle();
      assertEquals(90.0, double0, 0.01);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Locale locale0 = new Locale(",Ys");
      assertNotNull(locale0);
      assertEquals(",ys", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(",ys", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(",ys", locale0.getLanguage());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator("Multiple Pie Plot", locale0);
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals(",ys", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(",ys", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(",ys", locale0.getLanguage());
      assertEquals("Multiple Pie Plot", standardPieSectionLabelGenerator0.getLabelFormat());
      
      piePlot3D0.setLegendLabelGenerator(standardPieSectionLabelGenerator0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(",ys", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(",ys", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(",ys", locale0.getLanguage());
      assertEquals("Multiple Pie Plot", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double1 = ringPlot0.getMaximumExplodePercent();
      assertEquals(0.0, double1, 0.01);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      RingPlot ringPlot1 = new RingPlot(defaultPieDataset0);
      assertNotNull(ringPlot1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot1.getNoDataMessage());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertTrue(ringPlot1.isOutlineVisible());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot1.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot1.getNoDataMessage());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertTrue(ringPlot1.isOutlineVisible());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot0.setLegendLabelGenerator(standardPieSectionLabelGenerator0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color0 = (Color)piePlot0.lookupSectionPaint("{0}");
      assertNotNull(color0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot0.setLabelPaint(color0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      // Undeclared exception!
      try { 
        piePlot0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      
      piePlot3D0.setBaseSectionOutlinePaint(color0);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 10;
      numberArray1[1] = (Number) 10;
      numberArray1[2] = (Number) 90.0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      assertNotNull(multiplePiePlot0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot1);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertFalse(multiplePiePlot1.isSubplot());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot1.isOutlineVisible());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot1.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertFalse(multiplePiePlot1.isSubplot());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot1.isOutlineVisible());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      JFreeChart jFreeChart1 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart1);
      assertTrue(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertTrue(jFreeChart1.getAntiAlias());
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(10, 10, (ChartRenderingInfo) null);
      assertNotNull(bufferedImage0);
      assertTrue(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertTrue(jFreeChart1.getAntiAlias());
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0.5F, jFreeChart1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      
      piePlot3D0.setLabelPadding(rectangleInsets0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      SystemColor systemColor0 = SystemColor.controlText;
      assertNotNull(systemColor0);
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getGreen());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      
      Color color0 = Color.getColor("Null 'padding' argument.", (-2780));
      assertNotNull(color0);
      assertEquals((-2780), color0.getRGB());
      assertEquals(36, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(245, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      
      piePlot3D0.setBackgroundAlpha((-2780));
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals((-2780.0F), piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(jDBCCategoryDataset0);
      assertNotNull(spiderWebPlot0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      spiderWebPlot0.setDataset(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      spiderWebPlot0.setWebFilled(false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isWebFilled());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)spiderWebPlot0.getSeriesOutlineStroke((-2780));
      assertNotNull(basicStroke0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertFalse(spiderWebPlot0.isWebFilled());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      
      BasicStroke basicStroke1 = (BasicStroke)minMaxCategoryRenderer0.getGroupStroke();
      assertNotNull(basicStroke1);
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertNotSame(basicStroke1, basicStroke0);
      
      piePlot3D0.setLabelLinkStroke(basicStroke1);
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals((-2780.0F), piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertNotSame(basicStroke1, basicStroke0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      piePlot3D0.setShadowPaint(minMaxCategoryRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals((-2780.0F), piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke2 = (BasicStroke)piePlot3D0.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke2);
      assertFalse(basicStroke2.equals((Object)basicStroke1));
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke2.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke2.getLineJoin());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals((-2780.0F), piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertSame(basicStroke2, basicStroke0);
      assertNotSame(basicStroke2, basicStroke1);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color1 = (Color)piePlot3D0.getLabelShadowPaint();
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals((-2780.0F), piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(3, color1.getTransparency());
      assertEquals(128, color1.getAlpha());
      assertEquals((-2137548905), color1.getRGB());
      assertEquals(151, color1.getRed());
      assertEquals(151, color1.getGreen());
      assertEquals(151, color1.getBlue());
      assertNotSame(color1, color0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals((-2780.0F), piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color2 = (Color)piePlot3D0.getLabelShadowPaint();
      assertNotNull(color2);
      assertFalse(color2.equals((Object)color0));
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals((-2780.0F), piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(151, color2.getBlue());
      assertEquals(151, color2.getGreen());
      assertEquals(3, color2.getTransparency());
      assertEquals(128, color2.getAlpha());
      assertEquals((-2137548905), color2.getRGB());
      assertEquals(151, color2.getRed());
      assertSame(color2, color1);
      assertNotSame(color2, color0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 2059, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2059, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2059, bufferedImage0.getTileHeight());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot piePlot1 = new PiePlot();
      assertNotNull(piePlot1);
      assertTrue(piePlot1.equals((Object)piePlot0));
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot1.getLabelLinksVisible());
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot1.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot1.isCircular());
      assertTrue(piePlot1.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01);
      assertNull(piePlot1.getNoDataMessage());
      assertEquals(0.5F, piePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01);
      assertFalse(piePlot1.getIgnoreNullValues());
      assertFalse(piePlot1.isSubplot());
      assertFalse(piePlot1.getSimpleLabels());
      assertEquals(15, piePlot1.getBackgroundImageAlignment());
      assertEquals(0, piePlot1.getPieIndex());
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01);
      assertTrue(piePlot1.isOutlineVisible());
      assertFalse(piePlot1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot1.getLabelDistributor();
      assertNotNull(abstractPieLabelDistributor0);
      assertTrue(piePlot1.equals((Object)piePlot0));
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot1.getLabelLinksVisible());
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot1.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot1.isCircular());
      assertTrue(piePlot1.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01);
      assertNull(piePlot1.getNoDataMessage());
      assertEquals(0.5F, piePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01);
      assertFalse(piePlot1.getIgnoreNullValues());
      assertFalse(piePlot1.isSubplot());
      assertFalse(piePlot1.getSimpleLabels());
      assertEquals(15, piePlot1.getBackgroundImageAlignment());
      assertEquals(0, piePlot1.getPieIndex());
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01);
      assertTrue(piePlot1.isOutlineVisible());
      assertFalse(piePlot1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertNotSame(piePlot1, piePlot0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertNotNull(spiderWebPlot0);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)spiderWebPlot0.getSeriesOutlineStroke(10);
      assertNotNull(basicStroke0);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      assertNotNull(candlestickRenderer0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      DrawingSupplier drawingSupplier0 = candlestickRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      ringPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(2, true);
      assertNotNull(color0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      ringPlot0.setSectionOutlinesVisible(false);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      ringPlot0.setLabelShadowPaint(candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      double double0 = ringPlot0.getLabelGap();
      assertEquals(0.025, double0, 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      ringPlot0.setLegendItemShape(candlestickRenderer0.DEFAULT_SHAPE);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(candlestickRenderer0.ZERO, false);
      assertNotNull(basicStroke0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      Color color1 = (Color)ringPlot0.getBaseSectionOutlinePaint();
      assertNotNull(color1);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(255, color1.getAlpha());
      assertEquals(128, color1.getBlue());
      assertEquals(128, color1.getGreen());
      assertEquals(128, color1.getRed());
      assertEquals((-8355712), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertSame(color1, color0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      ringPlot0.setIgnoreNullValues(false);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ringPlot0.getLegendItemShape();
      assertNotNull(rectangle2D_Double0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      assertNotNull(candlestickRenderer0);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      DrawingSupplier drawingSupplier0 = candlestickRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      ringPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(2, true);
      assertNotNull(color0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator(locale0);
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(standardPieSectionLabelGenerator0);
      assertNotNull(rendererChangeEvent0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      
      candlestickRenderer0.notifyListeners(rendererChangeEvent0);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      ringPlot0.setSectionOutlinesVisible(true);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ringPlot0.setLabelShadowPaint(candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      Double double0 = new Double(1.0E-5);
      assertNotNull(double0);
      assertEquals(1.0E-5, (double)double0, 0.01);
      
      ringPlot0.setLegendItemShape(candlestickRenderer0.DEFAULT_SHAPE);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      ringPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ringPlot0.setMaximumLabelWidth((-3834.355692));
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals((-3834.355692), ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      // Undeclared exception!
      try { 
        ringPlot0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'object' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      double double0 = ringPlot0.getMaximumLabelWidth();
      assertEquals(0.14, double0, 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      TextBox textBox0 = new TextBox();
      assertNotNull(textBox0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord(0.4, 0.4, 0.14, textBox0, 1759.4, 1.0E-5, 302.38357);
      assertNotNull(pieLabelRecord0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(302.38357, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(0.4, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(1.0E-5, pieLabelRecord0.getGap(), 0.01);
      assertEquals(879.84, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(1759.4, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals((-879.5600000000001), pieLabelRecord0.getLowerY(), 0.01);
      
      double double1 = ringPlot0.getExplodePercent(pieLabelRecord0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(302.38357, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(0.4, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(1.0E-5, pieLabelRecord0.getGap(), 0.01);
      assertEquals(879.84, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(1759.4, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals((-879.5600000000001), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      
      ringPlot0.setBaseSectionOutlinePaint(color0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Stroke stroke0 = ringPlot0.getSectionOutlineStroke(pieLabelRecord0);
      assertNull(stroke0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(302.38357, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(0.4, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(1.0E-5, pieLabelRecord0.getGap(), 0.01);
      assertEquals(879.84, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(1759.4, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals((-879.5600000000001), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      double double2 = ringPlot0.getStartAngle();
      assertEquals(90.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      assertNotNull(bufferedImage0);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getWidth());
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertNotNull(graphics2D0);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getWidth());
      
      Paint paint0 = ringPlot0.getSectionOutlinePaint(pieLabelRecord0);
      assertNull(paint0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getAllocatedY(), 0.01);
      assertEquals(302.38357, pieLabelRecord0.getLinkPercent(), 0.01);
      assertEquals(0.4, pieLabelRecord0.getAngle(), 0.01);
      assertEquals(1.0E-5, pieLabelRecord0.getGap(), 0.01);
      assertEquals(879.84, pieLabelRecord0.getUpperY(), 0.01);
      assertEquals(1759.4, pieLabelRecord0.getLabelHeight(), 0.01);
      assertEquals(0.14, pieLabelRecord0.getBaseY(), 0.01);
      assertEquals((-879.5600000000001), pieLabelRecord0.getLowerY(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      SynthListUI synthListUI0 = new SynthListUI();
      assertNotNull(synthListUI0);
      
      Color color1 = (Color)CategoryPlot.DEFAULT_GRIDLINE_PAINT;
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      assertEquals(255, color1.getGreen());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals((-1), color1.getRGB());
      assertNotSame(color1, color0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      Paint paint1 = ringPlot0.getSectionPaint(1.0F);
      assertNull(paint1);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        piePlot3D0.setLabelLinkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      // Undeclared exception!
      try { 
        piePlot0.setBaseSectionOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color0 = (Color)piePlot0.lookupSectionPaint("{0}");
      assertNotNull(color0);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color1 = (Color)CategoryPlot.DEFAULT_GRIDLINE_PAINT;
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      assertEquals(255, color1.getRed());
      assertEquals((-1), color1.getRGB());
      assertEquals(255, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getBlue());
      assertNotSame(color1, color0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setLabelLinkPaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setMinimumArcAngleToDraw(151.0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(151.0, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertFalse(piePlot3D1.isSubplot());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        piePlot3D0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds((Rectangle2D) null, rectangle2D_Double0, 10, 20000.0, 0.0);
      assertNull(rectangle2D0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      int int0 = piePlot3D0.getPieIndex();
      assertEquals(0, int0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D0.setBaseSectionPaint(piePlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertFalse(piePlot3D1.isSubplot());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      PiePlot3D piePlot3D2 = new PiePlot3D();
      assertNotNull(piePlot3D2);
      assertTrue(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertFalse(piePlot3D2.isSubplot());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot3D2.setBaseSectionOutlineStroke(piePlot0.DEFAULT_LABEL_OUTLINE_STROKE);
      assertTrue(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertFalse(piePlot3D2.isSubplot());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D2.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertTrue(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertFalse(piePlot3D2.isSubplot());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getSimpleLabels());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getSimpleLabels());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color0 = Color.getColor("", 10);
      assertNotNull(color0);
      assertEquals(10, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777206), color0.getRGB());
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      piePlot3D0.setBackgroundAlpha(1.0F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      Color color1 = Color.getColor("", 10);
      assertNotNull(color1);
      assertTrue(color1.equals((Object)color0));
      assertEquals(10, color1.getBlue());
      assertEquals((-16777206), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getRed());
      assertNotSame(color1, color0);
      
      int int0 = 151;
      Color color2 = Color.getColor("c,", 151);
      assertNotNull(color2);
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      assertEquals(151, color2.getBlue());
      assertEquals((-16777065), color2.getRGB());
      assertEquals(255, color2.getAlpha());
      assertEquals(0, color2.getGreen());
      assertEquals(1, color2.getTransparency());
      assertEquals(0, color2.getRed());
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds((Rectangle2D) null, rectangle2D_Double0, 151, 20000.0, 0.0);
      assertNull(rectangle2D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D1 = new PiePlot3D(jDBCPieDataset0);
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D1.setLabelLinkPaint(piePlot0.DEFAULT_LABEL_SHADOW_PAINT);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getSimpleLabels());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D1.setMinimumArcAngleToDraw((-710.9409940905259));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals((-710.9409940905259), piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      int int1 = piePlot3D0.getPieIndex();
      assertEquals(0, int1);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(int1 == int0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      piePlot3D0.setBaseSectionOutlineStroke(piePlot3D1.DEFAULT_OUTLINE_STROKE);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals((-710.9409940905259), piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot3D piePlot3D2 = new PiePlot3D(jDBCPieDataset0);
      assertNotNull(piePlot3D2);
      assertTrue(piePlot3D2.equals((Object)piePlot3D0));
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D2.isSubplot());
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(0, piePlot3D2.getPieIndex());
      assertNull(piePlot3D2.getNoDataMessage());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertTrue(piePlot3D2.isOutlineVisible());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      piePlot3D2.setLabelOutlineStroke(piePlot3D0.DEFAULT_LABEL_OUTLINE_STROKE);
      assertTrue(piePlot3D2.equals((Object)piePlot3D0));
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D0.equals((Object)piePlot3D2));
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D2.isSubplot());
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(0, piePlot3D2.getPieIndex());
      assertNull(piePlot3D2.getNoDataMessage());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertTrue(piePlot3D2.isOutlineVisible());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D0, piePlot3D2);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      ComponentColorModel componentColorModel0 = null;
      try {
        componentColorModel0 = new ComponentColorModel((ColorSpace) null, false, false, 151, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown data type 10
         //
         verifyException("java.awt.image.DataBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot3D0.setBaseSectionPaint(piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertNull(piePlot3D1.getNoDataMessage());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 10);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      
      piePlot3D1.setMinimumArcAngleToDraw(151.0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertNull(piePlot3D1.getNoDataMessage());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(151.0, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D1.setBaseSectionOutlineStroke(piePlot3D0.DEFAULT_OUTLINE_STROKE);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertNull(piePlot3D1.getNoDataMessage());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(151.0, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PiePlot3D piePlot3D2 = new PiePlot3D();
      assertNotNull(piePlot3D2);
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D2.setSimpleLabels(true);
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertTrue(piePlot3D2.getSimpleLabels());
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)piePlot0.lookupSectionPaint("{0}");
      assertNotNull(color0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot0.setLabelPaint(color0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      int int0 = piePlot3D0.getPieIndex();
      assertEquals(0, int0);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D1.setBaseSectionOutlineStroke(piePlot3D0.DEFAULT_LABEL_OUTLINE_STROKE);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D1.setLabelOutlineStroke(basicStroke0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot(jDBCPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      int int0 = piePlot0.getPieIndex();
      assertEquals(0, int0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      String string0 = piePlot0.getPlotType();
      assertNotNull(string0);
      assertEquals("Pie Plot", string0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      String string0 = piePlot0.getPlotType();
      assertNotNull(string0);
      assertEquals("Pie Plot", string0);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "y/n\"x@R 6~= yis");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot3D0.getLabelDistributor();
      assertNotNull(abstractPieLabelDistributor0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D0.setLabelDistributor(abstractPieLabelDistributor0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Rotation rotation0 = piePlot3D0.getDirection();
      assertNotNull(rotation0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertNotNull(spiderWebPlot0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setBaseSectionPaint(spiderWebPlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D1.lookupSectionOutlineStroke(0.4);
      assertNotNull(basicStroke0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      double double0 = piePlot3D1.getMaximumLabelWidth();
      assertEquals(0.14, double0, 0.01);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      double double1 = piePlot3D0.getExplodePercent((-1.0));
      assertEquals(0.0, double1, 0.01);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      assertNotNull(candlestickRenderer0);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      DrawingSupplier drawingSupplier0 = candlestickRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      ringPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(2, true);
      assertNotNull(color0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ringPlot0.setSectionOutlinesVisible(false);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ringPlot0.setLabelShadowPaint(candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      double double0 = ringPlot0.getLabelGap();
      assertEquals(0.025, double0, 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      double double1 = piePlot3D0.getMaximumLabelWidth();
      assertEquals(0.14, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D(defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      double double2 = piePlot3D1.getInteriorGap();
      assertEquals(0.08, double2, 0.01);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getDarkerSides());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = (DefaultKeyedValuesDataset)piePlot3D1.getDataset();
      assertNotNull(defaultKeyedValuesDataset1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot3D1.setLegendItemShape(piePlot3D0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getDarkerSides());
      assertSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Rotation rotation0 = piePlot3D1.getDirection();
      assertNotNull(rotation0);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getDarkerSides());
      assertSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      assertNotNull(candlestickRenderer0);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      DrawingSupplier drawingSupplier0 = candlestickRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      ringPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(2, true);
      assertNotNull(color0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      ringPlot0.setSectionOutlinesVisible(false);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      ringPlot0.setLabelShadowPaint(candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      double double0 = ringPlot0.getLabelGap();
      assertEquals(0.025, double0, 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      ringPlot0.setLegendItemShape(candlestickRenderer0.DEFAULT_SHAPE);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(candlestickRenderer0.ZERO, false);
      assertNotNull(basicStroke0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      Color color1 = (Color)ringPlot0.getBaseSectionOutlinePaint();
      assertNotNull(color1);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(255, color1.getAlpha());
      assertEquals(128, color1.getBlue());
      assertEquals(128, color1.getGreen());
      assertEquals(128, color1.getRed());
      assertEquals((-8355712), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertSame(color1, color0);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)ringPlot0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      PieToolTipGenerator pieToolTipGenerator0 = ringPlot0.getToolTipGenerator();
      assertNull(pieToolTipGenerator0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      assertNotNull(candlestickRenderer0);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      DrawingSupplier drawingSupplier0 = candlestickRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      ringPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(2, true);
      assertNotNull(color0);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator(locale0);
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(standardPieSectionLabelGenerator0);
      assertNotNull(rendererChangeEvent0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      
      candlestickRenderer0.notifyListeners(rendererChangeEvent0);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      ringPlot0.setSectionOutlinesVisible(true);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      ringPlot0.setLabelShadowPaint(candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      double double0 = new Double(1.0E-5);
      assertEquals(1.0E-5, double0, 0.01);
      
      ringPlot0.setLegendItemShape(candlestickRenderer0.DEFAULT_SHAPE);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(candlestickRenderer0.ZERO, true);
      assertNotNull(basicStroke0);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      Color color1 = (Color)ringPlot0.getBaseSectionOutlinePaint();
      assertNotNull(color1);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals((-8355712), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(128, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(128, color1.getGreen());
      assertEquals(128, color1.getBlue());
      assertSame(color1, color0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      assertNotNull(candlestickRenderer0);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(2, true);
      assertNotNull(color0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals((-43691), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(85, color0.getBlue());
      assertEquals(85, color0.getGreen());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator(locale0);
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(standardPieSectionLabelGenerator0);
      assertNotNull(rendererChangeEvent0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      
      // Undeclared exception!
      try { 
        ringPlot0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      assertNotNull(candlestickRenderer0);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      
      DrawingSupplier drawingSupplier0 = candlestickRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      
      ringPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(2, true);
      assertNotNull(color0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ringPlot0.setSectionOutlinesVisible(false);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ringPlot0.setLabelShadowPaint(candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      
      double double0 = ringPlot0.getLabelGap();
      assertEquals(0.025, double0, 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ringPlot0.setLegendItemShape(candlestickRenderer0.DEFAULT_SHAPE);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(candlestickRenderer0.ZERO, false);
      assertNotNull(basicStroke0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      
      Color color1 = (Color)ringPlot0.getBaseSectionOutlinePaint();
      assertNotNull(color1);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(128, color1.getBlue());
      assertEquals(128, color1.getGreen());
      assertEquals(128, color1.getRed());
      assertEquals((-8355712), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertSame(color1, color0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BasicStroke basicStroke1 = (BasicStroke)ringPlot0.getLabelLinkStroke();
      assertNotNull(basicStroke1);
      assertTrue(basicStroke1.equals((Object)basicStroke0));
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertNotSame(basicStroke1, basicStroke0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      PieURLGenerator pieURLGenerator1 = ringPlot0.getLegendLabelURLGenerator();
      assertNull(pieURLGenerator1);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color0 = (Color)piePlot0.getBaseSectionOutlinePaint();
      assertNotNull(color0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      double double0 = ringPlot0.getStartAngle();
      assertEquals(90.0, double0, 0.01);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation((-1451));
      assertNotNull(axisLocation0);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertNotNull(rectangleEdge0);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot0.setMaximumLabelWidth(0.5);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      Comparable comparable0 = ringPlot0.getSectionKey(10);
      assertNotNull(comparable0);
      assertEquals(10, comparable0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      RingPlot ringPlot1 = new RingPlot();
      assertNotNull(ringPlot1);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      double double1 = ringPlot1.getStartAngle();
      assertEquals(90.0, double1, 0.01);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color1 = (Color)ringPlot0.getLabelShadowPaint();
      assertNotNull(color1);
      assertFalse(ringPlot0.equals((Object)ringPlot1));
      assertFalse(color1.equals((Object)color0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals((-2137548905), color1.getRGB());
      assertEquals(151, color1.getGreen());
      assertEquals(3, color1.getTransparency());
      assertEquals(128, color1.getAlpha());
      assertEquals(151, color1.getRed());
      assertEquals(151, color1.getBlue());
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(color1, color0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      RingPlot ringPlot2 = new RingPlot();
      assertNotNull(ringPlot2);
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertTrue(ringPlot2.equals((Object)ringPlot1));
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot2.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.isOutlineVisible());
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertFalse(ringPlot2.isSubplot());
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot2.getPieIndex());
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      double double2 = ringPlot2.getShadowXOffset();
      assertEquals(4.0, double2, 0.01);
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertTrue(ringPlot2.equals((Object)ringPlot1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot2.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.isOutlineVisible());
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertFalse(ringPlot2.isSubplot());
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot2.getPieIndex());
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertNull(ringPlot2.getNoDataMessage());
      assertNotSame(ringPlot2, ringPlot1);
      assertNotSame(ringPlot2, ringPlot0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot1.setIgnoreZeroValues(true);
      assertFalse(ringPlot1.equals((Object)ringPlot2));
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertTrue(ringPlot1.getIgnoreZeroValues());
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(ringPlot1, ringPlot2);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      ringPlot2.setLabelGap(10);
      assertFalse(ringPlot2.equals((Object)ringPlot1));
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.isOutlineVisible());
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertFalse(ringPlot2.isSubplot());
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot2.getPieIndex());
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertEquals(10.0, ringPlot2.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertNull(ringPlot2.getNoDataMessage());
      assertNotSame(ringPlot2, ringPlot1);
      assertNotSame(ringPlot2, ringPlot0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      RingPlot ringPlot3 = new RingPlot(defaultKeyedValuesDataset0);
      assertNotNull(ringPlot3);
      assertFalse(ringPlot3.equals((Object)ringPlot0));
      assertFalse(ringPlot3.equals((Object)ringPlot2));
      assertFalse(ringPlot3.equals((Object)ringPlot1));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.2, ringPlot3.getSectionDepth(), 0.01);
      assertTrue(ringPlot3.isOutlineVisible());
      assertFalse(ringPlot3.isSubplot());
      assertTrue(ringPlot3.isCircular());
      assertEquals(4.0, ringPlot3.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot3.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot3.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot3.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot3.getLabelLinksVisible());
      assertEquals(4.0, ringPlot3.getShadowXOffset(), 0.01);
      assertTrue(ringPlot3.getSeparatorsVisible());
      assertEquals(90.0, ringPlot3.getStartAngle(), 0.01);
      assertNull(ringPlot3.getNoDataMessage());
      assertEquals(0.5F, ringPlot3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot3.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot3.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot3.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot3.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot3.getSimpleLabels());
      assertTrue(ringPlot3.getSectionOutlinesVisible());
      assertFalse(ringPlot3.getIgnoreNullValues());
      assertFalse(ringPlot3.getIgnoreZeroValues());
      assertEquals(15, ringPlot3.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot3.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot3.getPieIndex());
      assertEquals(0.025, ringPlot3.getLabelGap(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ringPlot3.setSectionOutlinePaint(comparable0, ringPlot1.DEFAULT_LABEL_SHADOW_PAINT);
      assertFalse(ringPlot3.equals((Object)ringPlot0));
      assertFalse(ringPlot3.equals((Object)ringPlot2));
      assertFalse(ringPlot3.equals((Object)ringPlot1));
      assertFalse(ringPlot0.equals((Object)ringPlot3));
      assertFalse(ringPlot0.equals((Object)ringPlot2));
      assertFalse(ringPlot0.equals((Object)ringPlot1));
      assertFalse(ringPlot1.equals((Object)ringPlot2));
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertFalse(ringPlot1.equals((Object)ringPlot3));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.2, ringPlot3.getSectionDepth(), 0.01);
      assertTrue(ringPlot3.isOutlineVisible());
      assertFalse(ringPlot3.isSubplot());
      assertTrue(ringPlot3.isCircular());
      assertEquals(4.0, ringPlot3.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot3.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot3.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot3.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot3.getLabelLinksVisible());
      assertEquals(4.0, ringPlot3.getShadowXOffset(), 0.01);
      assertTrue(ringPlot3.getSeparatorsVisible());
      assertEquals(90.0, ringPlot3.getStartAngle(), 0.01);
      assertNull(ringPlot3.getNoDataMessage());
      assertEquals(0.5F, ringPlot3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot3.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot3.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot3.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot3.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot3.getSimpleLabels());
      assertTrue(ringPlot3.getSectionOutlinesVisible());
      assertFalse(ringPlot3.getIgnoreNullValues());
      assertFalse(ringPlot3.getIgnoreZeroValues());
      assertEquals(15, ringPlot3.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot3.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot3.getPieIndex());
      assertEquals(0.025, ringPlot3.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertTrue(ringPlot1.getIgnoreZeroValues());
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(ringPlot3, ringPlot0);
      assertNotSame(ringPlot3, ringPlot2);
      assertNotSame(ringPlot3, ringPlot1);
      assertNotSame(ringPlot0, ringPlot3);
      assertNotSame(ringPlot0, ringPlot2);
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(ringPlot1, ringPlot2);
      assertNotSame(ringPlot1, ringPlot0);
      assertNotSame(ringPlot1, ringPlot3);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color2 = (Color)ringPlot1.getLabelShadowPaint();
      assertNotNull(color2);
      assertFalse(color2.equals((Object)color0));
      assertFalse(ringPlot1.equals((Object)ringPlot2));
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertFalse(ringPlot1.equals((Object)ringPlot3));
      assertEquals(151, color2.getBlue());
      assertEquals(3, color2.getTransparency());
      assertEquals(151, color2.getGreen());
      assertEquals(128, color2.getAlpha());
      assertEquals((-2137548905), color2.getRGB());
      assertEquals(151, color2.getRed());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertTrue(ringPlot1.getIgnoreZeroValues());
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertSame(color2, color1);
      assertNotSame(color2, color0);
      assertNotSame(ringPlot1, ringPlot2);
      assertNotSame(ringPlot1, ringPlot0);
      assertNotSame(ringPlot1, ringPlot3);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color3 = (Color)ringPlot0.getLabelLinkPaint();
      assertNotNull(color3);
      assertFalse(ringPlot0.equals((Object)ringPlot3));
      assertFalse(ringPlot0.equals((Object)ringPlot2));
      assertFalse(ringPlot0.equals((Object)ringPlot1));
      assertFalse(color3.equals((Object)color0));
      assertFalse(color3.equals((Object)color2));
      assertFalse(color3.equals((Object)color1));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(255, color3.getAlpha());
      assertEquals(0, color3.getBlue());
      assertEquals((-16777216), color3.getRGB());
      assertEquals(0, color3.getGreen());
      assertEquals(1, color3.getTransparency());
      assertEquals(0, color3.getRed());
      assertNotSame(ringPlot0, ringPlot3);
      assertNotSame(ringPlot0, ringPlot2);
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(color3, color0);
      assertNotSame(color3, color2);
      assertNotSame(color3, color1);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot0.setInteriorGap(2.5E-6);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(2.5E-6, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      ringPlot0.setMaximumLabelWidth(0.08);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      ringPlot0.setSectionDepth((-1521.364));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals((-1521.364), ringPlot0.getSectionDepth(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals((-1521.364), ringPlot0.getSectionDepth(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Comparable comparable0 = ringPlot0.getSectionKey(10);
      assertNotNull(comparable0);
      assertEquals(10, comparable0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.08, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals((-1521.364), ringPlot0.getSectionDepth(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      RingPlot ringPlot1 = new RingPlot();
      assertNotNull(ringPlot1);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertFalse(ringPlot1.getSimpleLabels());
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setDataset(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.isSubplot());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        piePlot0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot0.setLabelLinkMargin((-1521.364));
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Rotation rotation0 = Rotation.ANTICLOCKWISE;
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getFactor(), 0.01);
      assertEquals("Rotation.ANTICLOCKWISE", rotation0.toString());
      
      ringPlot0.setDirection(rotation0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0, rotation0.getFactor(), 0.01);
      assertEquals("Rotation.ANTICLOCKWISE", rotation0.toString());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ringPlot0.setLegendLabelGenerator(standardPieSectionLabelGenerator0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(1.0F);
      assertNotNull(color0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot0.setLabelPaint(piePlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals((-1521.364), ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        ringPlot0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      piePlot3D0.setBaseSectionOutlinePaint(color0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      DrawingSupplier drawingSupplier0 = piePlot3D0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      ringPlot0.setDrawingSupplier(drawingSupplier0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      RingPlot ringPlot1 = new RingPlot();
      assertNotNull(ringPlot1);
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertFalse(ringPlot1.getSimpleLabels());
      assertTrue(ringPlot1.isCircular());
      assertFalse(ringPlot1.isSubplot());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      ringPlot1.setMaximumLabelWidth(0.08);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(0.08, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertFalse(ringPlot1.getSimpleLabels());
      assertTrue(ringPlot1.isCircular());
      assertFalse(ringPlot1.isSubplot());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      RingPlot ringPlot2 = (RingPlot)ringPlot1.clone();
      assertNotNull(ringPlot2);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertTrue(ringPlot2.equals((Object)ringPlot1));
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(0.08, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertFalse(ringPlot1.getSimpleLabels());
      assertTrue(ringPlot1.isCircular());
      assertFalse(ringPlot1.isSubplot());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertFalse(ringPlot2.getSimpleLabels());
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot2.isSubplot());
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertEquals(0, ringPlot2.getPieIndex());
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertTrue(ringPlot2.isOutlineVisible());
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertEquals(0.025, ringPlot2.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertNotSame(ringPlot1, ringPlot0);
      assertNotSame(ringPlot1, ringPlot2);
      assertNotSame(ringPlot2, ringPlot1);
      assertNotSame(ringPlot2, ringPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RingPlot ringPlot3 = new RingPlot(defaultKeyedValuesDataset0);
      assertNotNull(ringPlot3);
      assertFalse(ringPlot3.equals((Object)ringPlot1));
      assertTrue(ringPlot3.equals((Object)ringPlot0));
      assertFalse(ringPlot3.equals((Object)ringPlot2));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(ringPlot3.getIgnoreZeroValues());
      assertTrue(ringPlot3.isOutlineVisible());
      assertEquals(1.0F, ringPlot3.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot3.getInteriorGap(), 0.01);
      assertFalse(ringPlot3.getIgnoreNullValues());
      assertEquals(0.025, ringPlot3.getLabelGap(), 0.01);
      assertEquals(0, ringPlot3.getPieIndex());
      assertEquals(1.0E-5, ringPlot3.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot3.getShadowYOffset(), 0.01);
      assertEquals(0.5F, ringPlot3.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot3.getNoDataMessage());
      assertTrue(ringPlot3.getSeparatorsVisible());
      assertEquals(4.0, ringPlot3.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot3.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot3.getLabelLinksVisible());
      assertEquals(0.025, ringPlot3.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot3.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot3.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot3.isCircular());
      assertEquals(15, ringPlot3.getBackgroundImageAlignment());
      assertFalse(ringPlot3.isSubplot());
      assertFalse(ringPlot3.getSimpleLabels());
      assertEquals(0.2, ringPlot3.getSectionDepth(), 0.01);
      assertTrue(ringPlot3.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot3.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot3.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double0 = ringPlot3.getLabelGap();
      assertEquals(0.025, double0, 0.01);
      assertFalse(ringPlot3.equals((Object)ringPlot1));
      assertTrue(ringPlot3.equals((Object)ringPlot0));
      assertFalse(ringPlot3.equals((Object)ringPlot2));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(ringPlot3.getIgnoreZeroValues());
      assertTrue(ringPlot3.isOutlineVisible());
      assertEquals(1.0F, ringPlot3.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot3.getInteriorGap(), 0.01);
      assertFalse(ringPlot3.getIgnoreNullValues());
      assertEquals(0.025, ringPlot3.getLabelGap(), 0.01);
      assertEquals(0, ringPlot3.getPieIndex());
      assertEquals(1.0E-5, ringPlot3.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot3.getShadowYOffset(), 0.01);
      assertEquals(0.5F, ringPlot3.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot3.getNoDataMessage());
      assertTrue(ringPlot3.getSeparatorsVisible());
      assertEquals(4.0, ringPlot3.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot3.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot3.getLabelLinksVisible());
      assertEquals(0.025, ringPlot3.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot3.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot3.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot3.isCircular());
      assertEquals(15, ringPlot3.getBackgroundImageAlignment());
      assertFalse(ringPlot3.isSubplot());
      assertFalse(ringPlot3.getSimpleLabels());
      assertEquals(0.2, ringPlot3.getSectionDepth(), 0.01);
      assertTrue(ringPlot3.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot3.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot3.getMaximumLabelWidth(), 0.01);
      assertNotSame(ringPlot3, ringPlot1);
      assertNotSame(ringPlot3, ringPlot2);
      assertNotSame(ringPlot3, ringPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      
      piePlot3D0.setBaseSectionOutlinePaint(color0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      DrawingSupplier drawingSupplier0 = piePlot3D0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot0.setDrawingSupplier(drawingSupplier0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      ringPlot0.setMaximumLabelWidth((-668.1839913));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals((-668.1839913), ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertNotNull(ringPlot1);
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals((-668.1839913), ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals((-668.1839913), ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertFalse(ringPlot1.getSimpleLabels());
      assertTrue(ringPlot1.isCircular());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertTrue(ringPlot1.isOutlineVisible());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot1.getNoDataMessage());
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      double double0 = ringPlot0.getLabelGap();
      assertEquals(0.025, double0, 0.01);
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals((-668.1839913), ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertNotSame(ringPlot0, ringPlot1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Paint[] paintArray0 = new Paint[4];
      paintArray0[0] = ringPlot0.DEFAULT_BACKGROUND_PAINT;
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      
      paintArray0[1] = (Paint) color0;
      paintArray0[2] = ringPlot0.DEFAULT_LABEL_PAINT;
      paintArray0[3] = ringPlot0.DEFAULT_LABEL_PAINT;
      Stroke[] strokeArray0 = new Stroke[2];
      strokeArray0[0] = ringPlot0.DEFAULT_LABEL_OUTLINE_STROKE;
      strokeArray0[1] = ringPlot0.DEFAULT_OUTLINE_STROKE;
      Stroke[] strokeArray1 = new Stroke[9];
      assertFalse(strokeArray1.equals((Object)strokeArray0));
      
      strokeArray1[0] = ringPlot0.DEFAULT_OUTLINE_STROKE;
      strokeArray1[1] = ringPlot0.DEFAULT_LABEL_OUTLINE_STROKE;
      strokeArray1[2] = ringPlot0.DEFAULT_OUTLINE_STROKE;
      strokeArray1[3] = ringPlot0.DEFAULT_OUTLINE_STROKE;
      strokeArray1[4] = ringPlot0.DEFAULT_OUTLINE_STROKE;
      strokeArray1[5] = ringPlot0.DEFAULT_OUTLINE_STROKE;
      strokeArray1[6] = ringPlot0.DEFAULT_OUTLINE_STROKE;
      strokeArray1[7] = ringPlot0.DEFAULT_LABEL_OUTLINE_STROKE;
      strokeArray1[8] = ringPlot0.DEFAULT_LABEL_OUTLINE_STROKE;
      Shape[] shapeArray0 = new Shape[8];
      shapeArray0[0] = ringPlot0.DEFAULT_LEGEND_ITEM_BOX;
      shapeArray0[1] = ringPlot0.DEFAULT_LEGEND_ITEM_CIRCLE;
      shapeArray0[2] = ringPlot0.DEFAULT_LEGEND_ITEM_BOX;
      shapeArray0[3] = ringPlot0.DEFAULT_LEGEND_ITEM_BOX;
      shapeArray0[4] = ringPlot0.DEFAULT_LEGEND_ITEM_BOX;
      StringContent stringContent0 = new StringContent((-514));
      assertNotNull(stringContent0);
      
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      assertNotNull(plainDocument0);
      
      Element element0 = plainDocument0.getDefaultRootElement();
      assertNotNull(element0);
      
      ComponentView componentView0 = new ComponentView(element0);
      assertNotNull(componentView0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "8h&o6;%3V)EY@?");
      assertNotNull(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals("8h&o6;%3V)EY@?", cyclicNumberAxis0.getLabel());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      Polygon polygon0 = (Polygon)cyclicNumberAxis0.getDownArrow();
      assertNotNull(polygon0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals("8h&o6;%3V)EY@?", cyclicNumberAxis0.getLabel());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(3, polygon0.npoints);
      
      Shape shape0 = componentView0.getChildAllocation(10, polygon0);
      assertNull(shape0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals("8h&o6;%3V)EY@?", cyclicNumberAxis0.getLabel());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(3, polygon0.npoints);
      
      shapeArray0[5] = null;
      shapeArray0[6] = ringPlot0.DEFAULT_LEGEND_ITEM_CIRCLE;
      shapeArray0[7] = ringPlot0.DEFAULT_LEGEND_ITEM_BOX;
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, strokeArray0, strokeArray1, shapeArray0);
      assertNotNull(defaultDrawingSupplier0);
      assertEquals(4, paintArray0.length);
      assertEquals(8, shapeArray0.length);
      assertEquals(2, strokeArray0.length);
      assertEquals(9, strokeArray1.length);
      assertFalse(strokeArray0.equals((Object)strokeArray1));
      assertFalse(strokeArray1.equals((Object)strokeArray0));
      
      ringPlot0.setDrawingSupplier(defaultDrawingSupplier0);
      assertEquals(4, paintArray0.length);
      assertEquals(8, shapeArray0.length);
      assertEquals(2, strokeArray0.length);
      assertEquals(9, strokeArray1.length);
      assertFalse(strokeArray0.equals((Object)strokeArray1));
      assertFalse(strokeArray1.equals((Object)strokeArray0));
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNotSame(strokeArray0, strokeArray1);
      assertNotSame(strokeArray1, strokeArray0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      ringPlot0.setMaximumLabelWidth(0.0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertNotNull(ringPlot1);
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.0, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertFalse(ringPlot1.getSimpleLabels());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      double double0 = ringPlot0.getLabelGap();
      assertEquals(0.025, double0, 0.01);
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNotSame(ringPlot0, ringPlot1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setLegendLabelToolTipGenerator((PieSectionLabelGenerator) null);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance((-591.328081891), 0.025);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals((-591.328081891), affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.025, affineTransform0.getScaleY(), 0.01);
      assertEquals((-14.783202047275001), affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 10
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      piePlot3D0.setDataset(defaultPieDataset0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      AffineTransform affineTransform0 = AffineTransform.getShearInstance(1.0E-5, 0.08);
      assertNotNull(affineTransform0);
      assertEquals(0.9999992, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.08, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0E-5, affineTransform0.getShearX(), 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertNull(piePlot3D1.getNoDataMessage());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      double double0 = piePlot3D0.getMaximumExplodePercent();
      assertEquals(0.0, double0, 0.01);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator("I){x[");
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("I){x[", standardPieSectionLabelGenerator0.getLabelFormat());
      
      PiePlot3D piePlot3D2 = new PiePlot3D();
      assertNotNull(piePlot3D2);
      assertTrue(piePlot3D2.equals((Object)piePlot3D1));
      assertTrue(piePlot3D2.equals((Object)piePlot3D0));
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(0, piePlot3D2.getPieIndex());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertFalse(piePlot3D2.getDarkerSides());
      assertNull(piePlot3D2.getNoDataMessage());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator1 = (StandardPieSectionLabelGenerator)standardPieSectionLabelGenerator0.clone();
      assertNotNull(standardPieSectionLabelGenerator1);
      assertTrue(standardPieSectionLabelGenerator1.equals((Object)standardPieSectionLabelGenerator0));
      assertEquals("I){x[", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals("I){x[", standardPieSectionLabelGenerator1.getLabelFormat());
      assertNotSame(standardPieSectionLabelGenerator0, standardPieSectionLabelGenerator1);
      assertNotSame(standardPieSectionLabelGenerator1, standardPieSectionLabelGenerator0);
      
      piePlot3D1.setLabelOutlinePaint(piePlot3D0.DEFAULT_OUTLINE_PAINT);
      assertTrue(piePlot3D0.equals((Object)piePlot3D2));
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D1.equals((Object)piePlot3D2));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertNull(piePlot3D1.getNoDataMessage());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D0, piePlot3D2);
      assertNotSame(piePlot3D1, piePlot3D2);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PiePlot3D piePlot3D3 = new PiePlot3D(jDBCPieDataset0);
      assertNotNull(piePlot3D3);
      assertTrue(piePlot3D3.equals((Object)piePlot3D2));
      assertFalse(piePlot3D3.equals((Object)piePlot3D1));
      assertTrue(piePlot3D3.equals((Object)piePlot3D0));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertTrue(piePlot3D3.getSectionOutlinesVisible());
      assertFalse(piePlot3D3.getSimpleLabels());
      assertEquals(0, piePlot3D3.getPieIndex());
      assertEquals(4.0, piePlot3D3.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D3.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D3.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D3.getDepthFactor(), 0.01);
      assertFalse(piePlot3D3.isSubplot());
      assertFalse(piePlot3D3.getIgnoreNullValues());
      assertFalse(piePlot3D3.getIgnoreZeroValues());
      assertNull(piePlot3D3.getNoDataMessage());
      assertEquals(0.5F, piePlot3D3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D3.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D3.getDarkerSides());
      assertTrue(piePlot3D3.isOutlineVisible());
      assertEquals(0.025, piePlot3D3.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D3.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D3.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D3.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D3.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D3.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D3.isCircular());
      assertEquals(90.0, piePlot3D3.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D3.getShadowYOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setLegendLabelToolTipGenerator(standardPieSectionLabelGenerator0);
      assertFalse(piePlot3D0.equals((Object)piePlot3D3));
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D0.equals((Object)piePlot3D2));
      assertTrue(standardPieSectionLabelGenerator0.equals((Object)standardPieSectionLabelGenerator1));
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals("I){x[", standardPieSectionLabelGenerator0.getLabelFormat());
      assertNotSame(piePlot3D0, piePlot3D3);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D0, piePlot3D2);
      assertNotSame(standardPieSectionLabelGenerator0, standardPieSectionLabelGenerator1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      jDBCPieDataset0.removeChangeListener(piePlot3D0);
      assertFalse(piePlot3D0.equals((Object)piePlot3D3));
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D0.equals((Object)piePlot3D2));
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertNotSame(piePlot3D0, piePlot3D3);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D0, piePlot3D2);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double1 = piePlot3D3.getMaximumExplodePercent();
      assertEquals(0.0, double1, 0.01);
      assertFalse(piePlot3D3.equals((Object)piePlot3D0));
      assertTrue(piePlot3D3.equals((Object)piePlot3D2));
      assertFalse(piePlot3D3.equals((Object)piePlot3D1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertTrue(piePlot3D3.getSectionOutlinesVisible());
      assertFalse(piePlot3D3.getSimpleLabels());
      assertEquals(0, piePlot3D3.getPieIndex());
      assertEquals(4.0, piePlot3D3.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D3.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D3.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D3.getDepthFactor(), 0.01);
      assertFalse(piePlot3D3.isSubplot());
      assertFalse(piePlot3D3.getIgnoreNullValues());
      assertFalse(piePlot3D3.getIgnoreZeroValues());
      assertNull(piePlot3D3.getNoDataMessage());
      assertEquals(0.5F, piePlot3D3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D3.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D3.getDarkerSides());
      assertTrue(piePlot3D3.isOutlineVisible());
      assertEquals(0.025, piePlot3D3.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D3.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D3.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D3.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D3.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D3.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D3.isCircular());
      assertEquals(90.0, piePlot3D3.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D3.getShadowYOffset(), 0.01);
      assertNotSame(piePlot3D3, piePlot3D0);
      assertNotSame(piePlot3D3, piePlot3D1);
      assertNotSame(piePlot3D3, piePlot3D2);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D2.setLabelPaint(piePlot3D3.DEFAULT_BACKGROUND_PAINT);
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertFalse(piePlot3D2.equals((Object)piePlot3D3));
      assertFalse(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D3.equals((Object)piePlot3D0));
      assertFalse(piePlot3D3.equals((Object)piePlot3D1));
      assertFalse(piePlot3D3.equals((Object)piePlot3D2));
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertFalse(piePlot3D2.isSubplot());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(0, piePlot3D2.getPieIndex());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertFalse(piePlot3D2.getDarkerSides());
      assertNull(piePlot3D2.getNoDataMessage());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertFalse(piePlot3D2.isCircular());
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertTrue(piePlot3D3.getSectionOutlinesVisible());
      assertFalse(piePlot3D3.getSimpleLabels());
      assertEquals(0, piePlot3D3.getPieIndex());
      assertEquals(4.0, piePlot3D3.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D3.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D3.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D3.getDepthFactor(), 0.01);
      assertFalse(piePlot3D3.isSubplot());
      assertFalse(piePlot3D3.getIgnoreNullValues());
      assertFalse(piePlot3D3.getIgnoreZeroValues());
      assertNull(piePlot3D3.getNoDataMessage());
      assertEquals(0.5F, piePlot3D3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D3.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D3.getDarkerSides());
      assertTrue(piePlot3D3.isOutlineVisible());
      assertEquals(0.025, piePlot3D3.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D3.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D3.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D3.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D3.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D3.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D3.isCircular());
      assertEquals(90.0, piePlot3D3.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D3.getShadowYOffset(), 0.01);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertNotSame(piePlot3D2, piePlot3D3);
      assertNotSame(piePlot3D2, piePlot3D1);
      assertNotSame(piePlot3D3, piePlot3D0);
      assertNotSame(piePlot3D3, piePlot3D1);
      assertNotSame(piePlot3D3, piePlot3D2);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double2 = piePlot3D0.getMaximumExplodePercent();
      assertEquals(0.0, double2, 0.01);
      assertFalse(piePlot3D0.equals((Object)piePlot3D3));
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D0.equals((Object)piePlot3D2));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNotSame(piePlot3D0, piePlot3D3);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D0, piePlot3D2);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D1.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertFalse(piePlot3D1.equals((Object)piePlot3D2));
      assertFalse(piePlot3D1.equals((Object)piePlot3D3));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertNull(piePlot3D1.getNoDataMessage());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertNotSame(piePlot3D1, piePlot3D2);
      assertNotSame(piePlot3D1, piePlot3D3);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      piePlot0.setLegendLabelGenerator(standardPieSectionLabelGenerator0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      // Undeclared exception!
      try { 
        piePlot0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      System.setCurrentTimeMillis((-1593L));
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.isCircular());
      assertFalse(piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      StandardPieToolTipGenerator standardPieToolTipGenerator0 = new StandardPieToolTipGenerator("bxDCjV`&,P=G");
      assertNotNull(standardPieToolTipGenerator0);
      assertEquals("bxDCjV`&,P=G", standardPieToolTipGenerator0.getLabelFormat());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      assertNotNull(ringPlot0);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot0.setMaximumLabelWidth(10);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(10.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(10.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Comparable comparable0 = ringPlot0.getSectionKey(1679);
      assertNotNull(comparable0);
      assertEquals(1679, comparable0);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(10.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      RingPlot ringPlot1 = new RingPlot();
      assertNotNull(ringPlot1);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertFalse(ringPlot1.getSimpleLabels());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      assertNotNull(piePlot3D0);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot3D0.setDataset((PieDataset) null);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D1.getDarkerSides());
      assertFalse(piePlot3D1.isSubplot());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        ringPlot0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset1);
      assertNotNull(piePlot3D0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1.0F, (Number) 1.0F);
      assertNotNull(xYDataItem0);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      xYDataItem0.setY(360.0);
      assertEquals(360.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      Color color0 = (Color)piePlot3D0.lookupSectionOutlinePaint(xYDataItem0, false);
      assertNotNull(color0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(360.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Color color1 = (Color)piePlot3D0.lookupSectionPaint(xYDataItem0);
      assertNotNull(color1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(360.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(255, color1.getAlpha());
      assertEquals(128, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(128, color1.getBlue());
      assertEquals(128, color1.getRed());
      assertEquals((-8355712), color1.getRGB());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertSame(color1, color0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Rotation rotation0 = Rotation.CLOCKWISE;
      assertNotNull(rotation0);
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      
      piePlot3D0.setDirection(rotation0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      double double0 = piePlot3D0.getMinimumArcAngleToDraw();
      assertEquals(1.0E-5, double0, 0.01);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setDataset(defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setDirection(rotation0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Class<StandardPieURLGenerator> class0 = StandardPieURLGenerator.class;
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, (Date) null, zoneInfo0);
      assertNull(regularTimePeriod0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try { 
        piePlot3D0.getSectionPaint((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.PaintMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      piePlot3D0.setDataset(defaultPieDataset0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      AffineTransform affineTransform0 = AffineTransform.getShearInstance(1.0E-5, 0.08);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.9999992, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.08, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0E-5, affineTransform0.getShearX(), 0.01);
      
      int int0 = 0;
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 0
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(1696);
      assertNotNull(axisLocation0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setDataset(defaultPieDataset0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double0 = piePlot3D0.getMaximumExplodePercent();
      assertEquals(0.0, double0, 0.01);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D1.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      piePlot3D0.setDataset(defaultPieDataset0);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      AffineTransform affineTransform0 = AffineTransform.getShearInstance(1.0E-5, 0.08);
      assertNotNull(affineTransform0);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.9999992, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.08, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0E-5, affineTransform0.getShearX(), 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      double double0 = piePlot3D0.getMaximumExplodePercent();
      assertEquals(0.0, double0, 0.01);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator("I){x[");
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("I){x[", standardPieSectionLabelGenerator0.getLabelFormat());
      
      PiePlot3D piePlot3D2 = new PiePlot3D();
      assertNotNull(piePlot3D2);
      assertTrue(piePlot3D2.equals((Object)piePlot3D1));
      assertTrue(piePlot3D2.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(0, piePlot3D2.getPieIndex());
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertNull(piePlot3D2.getNoDataMessage());
      assertFalse(piePlot3D2.getDarkerSides());
      assertFalse(piePlot3D2.isCircular());
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D2.getSimpleLabels());
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D2.isSubplot());
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot3D1.setLabelOutlinePaint(piePlot3D0.DEFAULT_OUTLINE_PAINT);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D0.equals((Object)piePlot3D2));
      assertFalse(piePlot3D1.equals((Object)piePlot3D2));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D0, piePlot3D2);
      assertNotSame(piePlot3D1, piePlot3D2);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      jDBCPieDataset0.removeChangeListener(piePlot3D0);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D0.equals((Object)piePlot3D2));
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D0, piePlot3D2);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      // Undeclared exception!
      try { 
        piePlot3D2.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      piePlot3D0.setBaseSectionOutlinePaint(color0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isItalic());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      piePlot3D0.setShadowYOffset((-2822.33));
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals((-2822.33), piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      piePlot3D0.setLabelOutlineStroke((Stroke) null);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals((-2822.33), piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      Color color1 = (Color)piePlot3D0.getShadowPaint();
      assertNotNull(color1);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals((-2822.33), piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals((-8355712), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(128, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertEquals(128, color1.getBlue());
      assertEquals(128, color1.getRed());
      assertSame(color1, color0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)LineRenderer3D.DEFAULT_WALL_PAINT;
      assertNotNull(color0);
      assertEquals(221, color0.getBlue());
      assertEquals(221, color0.getGreen());
      assertEquals((-2236963), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(221, color0.getRed());
      assertEquals(1, color0.getTransparency());
      
      piePlot0.setLabelOutlinePaint(color0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(221, color0.getBlue());
      assertEquals(221, color0.getGreen());
      assertEquals((-2236963), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(221, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = piePlot0.getLabelLinksVisible();
      assertTrue(boolean0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color1 = (Color)piePlot0.getShadowPaint();
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(128, color1.getBlue());
      assertEquals(128, color1.getGreen());
      assertEquals(128, color1.getRed());
      assertEquals((-8355712), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertNotSame(color1, color0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(0.08, 10);
      assertNotNull(affineTransform0);
      assertEquals(0.08, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.8, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(10.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      
      JFreeChart jFreeChart0 = new JFreeChart(",LmV3+1", piePlot0);
      assertNotNull(jFreeChart0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertNotNull(renderingHints0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      assertNotNull(affineTransformOp0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.8, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(10.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, affineTransformOp0.getInterpolationType());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      assertNotNull(colorConvertOp0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      int int0 = 1754;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-121);
      byteArray0[0] = (byte) (-121);
      byte byte1 = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)112;
      byte byte2 = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      byte byte3 = (byte)3;
      byteArray0[4] = (byte)3;
      int int1 = 1865;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, 10, byteArray0, 1865, true, (byte) (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1865
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      
      piePlot3D0.setBaseSectionOutlinePaint(color0);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot3D0.setShadowYOffset((-2822.33));
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals((-2822.33), piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Comparable comparable0 = piePlot3D0.getSectionKey(506);
      assertNotNull(comparable0);
      assertEquals(506, comparable0);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals((-2822.33), piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      // Undeclared exception!
      try { 
        piePlot3D0.setLabelLinkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot piePlot1 = new PiePlot();
      assertNotNull(piePlot1);
      assertTrue(piePlot1.equals((Object)piePlot0));
      assertFalse(piePlot1.getIgnoreNullValues());
      assertFalse(piePlot1.isSubplot());
      assertTrue(piePlot1.getSectionOutlinesVisible());
      assertEquals(15, piePlot1.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot1.getSimpleLabels());
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01);
      assertNull(piePlot1.getNoDataMessage());
      assertFalse(piePlot1.getIgnoreZeroValues());
      assertEquals(0, piePlot1.getPieIndex());
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, piePlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot1.isOutlineVisible());
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01);
      assertTrue(piePlot1.getLabelLinksVisible());
      assertEquals(1.0F, piePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot1.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot1.isCircular());
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot1.getLabelDistributor();
      assertNotNull(abstractPieLabelDistributor0);
      assertTrue(piePlot1.equals((Object)piePlot0));
      assertFalse(piePlot1.getIgnoreNullValues());
      assertFalse(piePlot1.isSubplot());
      assertTrue(piePlot1.getSectionOutlinesVisible());
      assertEquals(15, piePlot1.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot1.getSimpleLabels());
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01);
      assertNull(piePlot1.getNoDataMessage());
      assertFalse(piePlot1.getIgnoreZeroValues());
      assertEquals(0, piePlot1.getPieIndex());
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, piePlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot1.isOutlineVisible());
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01);
      assertTrue(piePlot1.getLabelLinksVisible());
      assertEquals(1.0F, piePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot1.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot1.isCircular());
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01);
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertNotSame(piePlot1, piePlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(10);
      assertNotNull(pieLabelDistributor0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      piePlot3D0.setLabelDistributor(pieLabelDistributor0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Rotation rotation0 = piePlot3D0.getDirection();
      assertNotNull(rotation0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot3D0.getLabelDistributor();
      assertNotNull(abstractPieLabelDistributor0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setLabelDistributor(abstractPieLabelDistributor0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setBackgroundImageAlignment((-910));
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Rotation rotation0 = piePlot3D0.getDirection();
      assertNotNull(rotation0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertNotNull(spiderWebPlot0);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "U";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      spiderWebPlot0.setDataset(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      spiderWebPlot0.setWebFilled(true);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)spiderWebPlot0.getSeriesOutlineStroke(10);
      assertNotNull(basicStroke0);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setLabelLinkStroke(basicStroke0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setShadowPaint(spiderWebPlot0.DEFAULT_LABEL_BACKGROUND_PAINT);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke1 = (BasicStroke)piePlot3D0.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke1);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertSame(basicStroke1, basicStroke0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color0 = (Color)piePlot3D0.getLabelShadowPaint();
      assertNotNull(color0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals((-2137548905), color0.getRGB());
      assertEquals(151, color0.getRed());
      assertEquals(151, color0.getBlue());
      assertEquals(128, color0.getAlpha());
      assertEquals(151, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color1 = (Color)piePlot3D0.getLabelShadowPaint();
      assertNotNull(color1);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(151, color1.getBlue());
      assertEquals(128, color1.getAlpha());
      assertEquals(3, color1.getTransparency());
      assertEquals(151, color1.getGreen());
      assertEquals((-2137548905), color1.getRGB());
      assertEquals(151, color1.getRed());
      assertSame(color1, color0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 10, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (10) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot3D0.getLabelDistributor();
      assertNotNull(abstractPieLabelDistributor0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot3D0.setLabelDistributor(abstractPieLabelDistributor0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      int int0 = (-910);
      piePlot3D0.setBackgroundImageAlignment((-910));
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Rotation rotation0 = piePlot3D0.getDirection();
      assertNotNull(rotation0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals((-1.0), rotation0.getFactor(), 0.01);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertNotNull(spiderWebPlot0);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "U";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      spiderWebPlot0.setDataset(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      spiderWebPlot0.setWebFilled(true);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)spiderWebPlot0.getSeriesOutlineStroke(10);
      assertNotNull(basicStroke0);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot3D0.setLabelLinkStroke(basicStroke0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot3D0.setShadowPaint(spiderWebPlot0.DEFAULT_LABEL_BACKGROUND_PAINT);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke1 = (BasicStroke)piePlot3D0.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke1);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertSame(basicStroke1, basicStroke0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color0 = (Color)piePlot3D0.getLabelShadowPaint();
      assertNotNull(color0);
      assertEquals(128, color0.getAlpha());
      assertEquals(3, color0.getTransparency());
      assertEquals(151, color0.getBlue());
      assertEquals(151, color0.getGreen());
      assertEquals(151, color0.getRed());
      assertEquals((-2137548905), color0.getRGB());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color1 = (Color)piePlot3D0.getLabelShadowPaint();
      assertNotNull(color1);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals((-910), piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(151, color1.getGreen());
      assertEquals((-2137548905), color1.getRGB());
      assertEquals(151, color1.getRed());
      assertEquals(128, color1.getAlpha());
      assertEquals(3, color1.getTransparency());
      assertEquals(151, color1.getBlue());
      assertSame(color1, color0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, (-2183), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (-2183) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot3D0.setLabelPaint(piePlot3D0.DEFAULT_OUTLINE_PAINT);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      // Undeclared exception!
      try { 
        piePlot3D0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color0 = (Color)piePlot0.getBaseSectionOutlinePaint();
      assertNotNull(color0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      int int0 = defaultPieDataset0.getIndex(1.0F);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      piePlot0.setLabelPaint(color0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      defaultPieDataset0.setValue((Comparable) 1.0F, 1.0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      AreaRenderer areaRenderer0 = new AreaRenderer();
      assertNotNull(areaRenderer0);
      assertFalse(areaRenderer0.getBaseItemLabelsVisible());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertFalse(areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(areaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(areaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(areaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(areaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(areaRenderer0.getBaseSeriesVisible());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(areaRenderer0.getBaseCreateEntities());
      assertEquals(0, areaRenderer0.getRowCount());
      
      int int1 = (-1274);
      CategoryToolTipGenerator categoryToolTipGenerator0 = areaRenderer0.getToolTipGenerator((-1274), 10);
      assertNull(categoryToolTipGenerator0);
      assertFalse(areaRenderer0.getBaseItemLabelsVisible());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertFalse(areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(areaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(areaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(areaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(areaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(areaRenderer0.getBaseSeriesVisible());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(areaRenderer0.getBaseCreateEntities());
      assertEquals(0, areaRenderer0.getRowCount());
      
      String string0 = " XYsYX.eR5EyS";
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      LegendItemCollection legendItemCollection0 = areaRenderer0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertFalse(areaRenderer0.getBaseItemLabelsVisible());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertFalse(areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(areaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(areaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(areaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(areaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(areaRenderer0.getBaseSeriesVisible());
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(areaRenderer0.getBaseCreateEntities());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(0, legendItemCollection0.getItemCount());
      
      int int2 = defaultPieDataset0.getIndex(1.0F);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      SortOrder sortOrder0 = categoryPlot0.getRowRenderingOrder();
      assertNotNull(sortOrder0);
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      defaultKeyedValuesDataset0.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("SansSerif");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'n'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PieURLGenerator pieURLGenerator0 = piePlot0.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot0.setURLGenerator((PieURLGenerator) null);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot0.setLegendLabelGenerator(standardPieSectionLabelGenerator0);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Color color0 = (Color)piePlot0.lookupSectionPaint("{0}");
      assertNotNull(color0);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot0.setLabelPaint(color0);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        piePlot0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D1.lookupSectionOutlineStroke(10);
      assertNotNull(basicStroke0);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)piePlot3D0.getBaseSectionOutlinePaint();
      assertNotNull(color0);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertNotSame(piePlot3D0, piePlot3D1);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color0 = (Color)piePlot0.getBaseSectionOutlinePaint();
      assertNotNull(color0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      double double0 = ringPlot0.getStartAngle();
      assertEquals(90.0, double0, 0.01);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation((-1451));
      assertNotNull(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertNotNull(rectangleEdge0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot0.setMaximumLabelWidth(0.5);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      
      Rectangle2D.union(rectangle2D_Double0, rectangle2D_Double0, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      
      ringPlot0.setInteriorGap(0.0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.0, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot0.setLabelLinkMargin(1672.1206641);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1672.1206641, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      ringPlot0.setBaseSectionOutlineStroke(piePlot0.DEFAULT_LABEL_OUTLINE_STROKE);
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1672.1206641, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.0, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setCircular(false);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      boolean boolean0 = piePlot3D0.getIgnoreZeroValues();
      assertFalse(boolean0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        SerialUtilities.readShape((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(1696);
      assertNotNull(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertNotNull(rectangleEdge0);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ringPlot0.setMaximumLabelWidth((-1432.76547));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals((-1432.76547), ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals((-1432.76547), ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Comparable comparable0 = ringPlot0.getSectionKey(10);
      assertNotNull(comparable0);
      assertEquals(10, comparable0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals((-1432.76547), ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      RingPlot ringPlot1 = new RingPlot();
      assertNotNull(ringPlot1);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      double double0 = ringPlot1.getStartAngle();
      assertEquals(90.0, double0, 0.01);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)ringPlot0.getLabelShadowPaint();
      assertNotNull(color0);
      assertFalse(ringPlot0.equals((Object)ringPlot1));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals((-1432.76547), ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(151, color0.getGreen());
      assertEquals(151, color0.getRed());
      assertEquals(151, color0.getBlue());
      assertEquals(3, color0.getTransparency());
      assertEquals((-2137548905), color0.getRGB());
      assertEquals(128, color0.getAlpha());
      assertNotSame(ringPlot0, ringPlot1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      RingPlot ringPlot2 = new RingPlot();
      assertNotNull(ringPlot2);
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertTrue(ringPlot2.equals((Object)ringPlot1));
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertTrue(ringPlot2.isOutlineVisible());
      assertFalse(ringPlot2.isSubplot());
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.025, ringPlot2.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertEquals(0, ringPlot2.getPieIndex());
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double1 = ringPlot2.getShadowXOffset();
      assertEquals(4.0, double1, 0.01);
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertTrue(ringPlot2.equals((Object)ringPlot1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertTrue(ringPlot2.isOutlineVisible());
      assertFalse(ringPlot2.isSubplot());
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.025, ringPlot2.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertEquals(0, ringPlot2.getPieIndex());
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(ringPlot2, ringPlot1);
      assertNotSame(ringPlot2, ringPlot0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      ringPlot1.setIgnoreZeroValues(true);
      assertFalse(ringPlot1.equals((Object)ringPlot2));
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertTrue(ringPlot1.getIgnoreZeroValues());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertNotSame(ringPlot1, ringPlot2);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot2.setLabelGap(0.08);
      assertFalse(ringPlot2.equals((Object)ringPlot1));
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertEquals(0.08, ringPlot2.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertTrue(ringPlot2.isOutlineVisible());
      assertFalse(ringPlot2.isSubplot());
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertEquals(0, ringPlot2.getPieIndex());
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(ringPlot2, ringPlot1);
      assertNotSame(ringPlot2, ringPlot0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      RingPlot ringPlot3 = new RingPlot(defaultPieDataset0);
      assertNotNull(ringPlot3);
      assertFalse(ringPlot3.equals((Object)ringPlot2));
      assertFalse(ringPlot3.equals((Object)ringPlot0));
      assertFalse(ringPlot3.equals((Object)ringPlot1));
      assertTrue(ringPlot3.getSeparatorsVisible());
      assertFalse(ringPlot3.getSimpleLabels());
      assertEquals(15, ringPlot3.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot3.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot3.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot3.getLabelLinksVisible());
      assertEquals(0.025, ringPlot3.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot3.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot3.getNoDataMessage());
      assertEquals(4.0, ringPlot3.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot3.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot3.getIgnoreZeroValues());
      assertEquals(0, ringPlot3.getPieIndex());
      assertTrue(ringPlot3.getSectionOutlinesVisible());
      assertTrue(ringPlot3.isOutlineVisible());
      assertEquals(1.0F, ringPlot3.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot3.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot3.getLabelGap(), 0.01);
      assertFalse(ringPlot3.getIgnoreNullValues());
      assertEquals(0.2, ringPlot3.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot3.isCircular());
      assertEquals(0.2, ringPlot3.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot3.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot3.getSectionDepth(), 0.01);
      assertFalse(ringPlot3.isSubplot());
      assertEquals(0.14, ringPlot3.getMaximumLabelWidth(), 0.01);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      ringPlot3.setSectionOutlinePaint(1.0E-5, ringPlot2.DEFAULT_LABEL_PAINT);
      assertFalse(ringPlot3.equals((Object)ringPlot2));
      assertFalse(ringPlot3.equals((Object)ringPlot0));
      assertFalse(ringPlot3.equals((Object)ringPlot1));
      assertFalse(ringPlot2.equals((Object)ringPlot1));
      assertFalse(ringPlot2.equals((Object)ringPlot3));
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertTrue(ringPlot3.getSeparatorsVisible());
      assertFalse(ringPlot3.getSimpleLabels());
      assertEquals(15, ringPlot3.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot3.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot3.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot3.getLabelLinksVisible());
      assertEquals(0.025, ringPlot3.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot3.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot3.getNoDataMessage());
      assertEquals(4.0, ringPlot3.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot3.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(ringPlot3.getIgnoreZeroValues());
      assertEquals(0, ringPlot3.getPieIndex());
      assertTrue(ringPlot3.getSectionOutlinesVisible());
      assertTrue(ringPlot3.isOutlineVisible());
      assertEquals(1.0F, ringPlot3.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot3.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot3.getLabelGap(), 0.01);
      assertFalse(ringPlot3.getIgnoreNullValues());
      assertEquals(0.2, ringPlot3.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot3.isCircular());
      assertEquals(0.2, ringPlot3.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot3.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot3.getSectionDepth(), 0.01);
      assertFalse(ringPlot3.isSubplot());
      assertEquals(0.14, ringPlot3.getMaximumLabelWidth(), 0.01);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertEquals(0.08, ringPlot2.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertTrue(ringPlot2.isOutlineVisible());
      assertFalse(ringPlot2.isSubplot());
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertEquals(0, ringPlot2.getPieIndex());
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(ringPlot3, ringPlot2);
      assertNotSame(ringPlot3, ringPlot0);
      assertNotSame(ringPlot3, ringPlot1);
      assertNotSame(ringPlot2, ringPlot1);
      assertNotSame(ringPlot2, ringPlot3);
      assertNotSame(ringPlot2, ringPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color1 = (Color)ringPlot0.getLabelShadowPaint();
      assertNotNull(color1);
      assertFalse(ringPlot0.equals((Object)ringPlot1));
      assertFalse(ringPlot0.equals((Object)ringPlot3));
      assertFalse(ringPlot0.equals((Object)ringPlot2));
      assertEquals((-2137548905), color1.getRGB());
      assertEquals(151, color1.getGreen());
      assertEquals(151, color1.getRed());
      assertEquals(151, color1.getBlue());
      assertEquals(3, color1.getTransparency());
      assertEquals(128, color1.getAlpha());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.isCircular());
      assertFalse(ringPlot0.isSubplot());
      assertEquals((-1432.76547), ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertSame(color1, color0);
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(ringPlot0, ringPlot3);
      assertNotSame(ringPlot0, ringPlot2);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color2 = (Color)ringPlot2.getLabelLinkPaint();
      assertNotNull(color2);
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      assertFalse(ringPlot2.equals((Object)ringPlot1));
      assertFalse(ringPlot2.equals((Object)ringPlot3));
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertEquals((-16777216), color2.getRGB());
      assertEquals(1, color2.getTransparency());
      assertEquals(0, color2.getRed());
      assertEquals(255, color2.getAlpha());
      assertEquals(0, color2.getBlue());
      assertEquals(0, color2.getGreen());
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertEquals(0.08, ringPlot2.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertTrue(ringPlot2.isOutlineVisible());
      assertFalse(ringPlot2.isSubplot());
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertTrue(ringPlot2.isCircular());
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertEquals(0, ringPlot2.getPieIndex());
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      assertNotSame(ringPlot2, ringPlot1);
      assertNotSame(ringPlot2, ringPlot3);
      assertNotSame(ringPlot2, ringPlot0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color0 = Color.getColor("", 10);
      assertNotNull(color0);
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777206), color0.getRGB());
      assertEquals(10, color0.getBlue());
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color1 = Color.getColor("", 10);
      assertNotNull(color1);
      assertTrue(color1.equals((Object)color0));
      assertEquals(255, color1.getAlpha());
      assertEquals((-16777206), color1.getRGB());
      assertEquals(0, color1.getGreen());
      assertEquals(10, color1.getBlue());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getRed());
      assertNotSame(color1, color0);
      
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_GRIDLINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      
      piePlot3D0.setLabelOutlineStroke(basicStroke0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      ringPlot0.setCircular(true, true);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color2 = Color.getColor("c,", 151);
      assertNotNull(color2);
      assertFalse(color2.equals((Object)color1));
      assertFalse(color2.equals((Object)color0));
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertEquals(0, color2.getGreen());
      assertEquals((-16777065), color2.getRGB());
      assertEquals(151, color2.getBlue());
      assertEquals(0, color2.getRed());
      assertNotSame(color2, color1);
      assertNotSame(color2, color0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      
      // Undeclared exception!
      try { 
        ringPlot0.setInteriorGap(151);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (151.0) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      Range range0 = ValueAxis.DEFAULT_RANGE;
      assertNotNull(range0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("=Z$0", range0);
      assertNotNull(moduloAxis0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals("=Z$0", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, moduloAxis0, moduloAxis0, (XYItemRenderer) null);
      assertNotNull(xYPlot0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals("=Z$0", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      defaultKeyedValuesDataset0.removeChangeListener(xYPlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals("=Z$0", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      defaultKeyedValuesDataset0.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = true;
      ringPlot0.setCircular(true);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)ringPlot0.getLabelLinkPaint();
      assertNotNull(color0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color1 = (Color)ringPlot0.getBaseSectionOutlinePaint();
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(128, color1.getRed());
      assertEquals(128, color1.getGreen());
      assertEquals((-8355712), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(128, color1.getBlue());
      assertNotSame(color1, color0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Class<Float> class0 = Float.class;
      TimeSeries timeSeries0 = new TimeSeries(10, "n6t)Mpp\"P5c$)K~'AD)", "n6t)Mpp\"P5c$)K~'AD)", class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("n6t)Mpp\"P5c$)K~'AD)", timeSeries0.getRangeDescription());
      assertEquals("n6t)Mpp\"P5c$)K~'AD)", timeSeries0.getDomainDescription());
      
      MockDate mockDate0 = new MockDate(10, 10, 10);
      assertNotNull(mockDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(zoneInfo0);
      assertEquals("UTC", zoneInfo0.getID());
      
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(44);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 44, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertFalse(font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D0.setShadowYOffset((-2822.33));
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals((-2822.33), piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D0.setLabelOutlineStroke((Stroke) null);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals((-2822.33), piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      // Undeclared exception!
      try { 
        piePlot3D0.lookupSectionPaint((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.PaintMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Paint paint0 = piePlot3D0.getSectionPaint(1.0E-5);
      assertNull(paint0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setShadowYOffset(723.5313323668022);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(723.5313323668022, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setLabelOutlineStroke(piePlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(723.5313323668022, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color0 = Color.magenta;
      assertNotNull(color0);
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals((-65281), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color0 = (Color)piePlot0.lookupSectionPaint("{0}");
      assertNotNull(color0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      // Undeclared exception!
      try { 
        piePlot0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      piePlot3D0.setBaseSectionOutlinePaint(color0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setShadowYOffset((-2822.33));
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertEquals((-2822.33), piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setLabelOutlineStroke((Stroke) null);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertEquals((-2822.33), piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      // Undeclared exception!
      try { 
        piePlot3D0.lookupSectionPaint((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.PaintMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D(jDBCPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      assertNotNull(dateTickUnit0);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, dateTickUnit0.getCount());
      assertEquals(2, dateTickUnit0.getRollUnit());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(2, dateTickUnit0.getUnit());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01);
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(1, dateTickUnit0.getRollCount());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(3, DateTickUnit.HOUR);
      assertEquals(5, DateTickUnit.SECOND);
      assertEquals(6, DateTickUnit.MILLISECOND);
      assertEquals(4, DateTickUnit.MINUTE);
      assertEquals(1, DateTickUnit.MONTH);
      assertEquals(0, DateTickUnit.YEAR);
      assertEquals(2, DateTickUnit.DAY);
      
      Stroke stroke0 = piePlot3D0.getSectionOutlineStroke(dateTickUnit0);
      assertNull(stroke0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, dateTickUnit0.getCount());
      assertEquals(2, dateTickUnit0.getRollUnit());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(2, dateTickUnit0.getUnit());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01);
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(1, dateTickUnit0.getRollCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(3, DateTickUnit.HOUR);
      assertEquals(5, DateTickUnit.SECOND);
      assertEquals(6, DateTickUnit.MILLISECOND);
      assertEquals(4, DateTickUnit.MINUTE);
      assertEquals(1, DateTickUnit.MONTH);
      assertEquals(0, DateTickUnit.YEAR);
      assertEquals(2, DateTickUnit.DAY);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Comparable comparable0 = piePlot0.getSectionKey(93);
      assertNotNull(comparable0);
      assertEquals(93, comparable0);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 2116805310);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2116805310, categoryToPieDataset0.getExtractIndex());
      
      PiePlot3D piePlot3D0 = new PiePlot3D(categoryToPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2116805310, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setBaseSectionOutlinePaint(color0);
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2116805310, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Font font0 = ringPlot0.DEFAULT_LABEL_FONT.deriveFont(10, 1.0F);
      assertNotNull(font0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertEquals(1, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      piePlot3D0.setShadowYOffset((-1290.0631244060512));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2116805310, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals((-1290.0631244060512), piePlot3D0.getShadowYOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot3D1.setLabelOutlineStroke(ringPlot0.DEFAULT_OUTLINE_STROKE);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color1 = Color.magenta;
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getBlue());
      assertEquals((-65281), color1.getRGB());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertNotSame(color1, color0);
      
      double double0 = ringPlot0.getShadowXOffset();
      assertEquals(4.0, double0, 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot0.setLabelGap(6029.45886758);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(6029.45886758, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setBaseSectionPaint(piePlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(6029.45886758, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot0.setOutlinePaint(piePlot3D0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(6029.45886758, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      PiePlot3D piePlot3D2 = new PiePlot3D();
      assertNotNull(piePlot3D2);
      assertTrue(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D2.getNoDataMessage());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertFalse(piePlot3D2.isSubplot());
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertFalse(piePlot3D2.isCircular());
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D2.setBaseSectionOutlineStroke(piePlot0.DEFAULT_LABEL_OUTLINE_STROKE);
      assertTrue(piePlot3D2.equals((Object)piePlot3D1));
      assertFalse(piePlot3D2.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(6029.45886758, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D2.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D2.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D2.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D2.getPieIndex());
      assertFalse(piePlot3D2.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D2.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D2.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D2.getLabelLinksVisible());
      assertTrue(piePlot3D2.isOutlineVisible());
      assertEquals(0.025, piePlot3D2.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D2.getDarkerSides());
      assertEquals(0.5F, piePlot3D2.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D2.getNoDataMessage());
      assertEquals(0.025, piePlot3D2.getLabelGap(), 0.01);
      assertFalse(piePlot3D2.isSubplot());
      assertEquals(0.12, piePlot3D2.getDepthFactor(), 0.01);
      assertTrue(piePlot3D2.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D2.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D2.getBackgroundImageAlignment());
      assertFalse(piePlot3D2.getSimpleLabels());
      assertFalse(piePlot3D2.isCircular());
      assertEquals(4.0, piePlot3D2.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D2.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D2.getMinimumArcAngleToDraw(), 0.01);
      assertNotSame(piePlot3D2, piePlot3D0);
      assertNotSame(piePlot3D2, piePlot3D1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D1.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertTrue(piePlot3D1.equals((Object)piePlot3D2));
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertFalse(piePlot3D1.isCircular());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertFalse(piePlot3D1.getSimpleLabels());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertFalse(piePlot3D1.isSubplot());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertNull(piePlot3D1.getNoDataMessage());
      assertFalse(piePlot3D1.getDarkerSides());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotSame(piePlot3D1, piePlot3D2);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      SystemColor systemColor0 = SystemColor.activeCaption;
      assertNotNull(systemColor0);
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777088), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getGreen());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset1);
      assertNotNull(ringPlot0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator("Multiple Pie Plot", ",Ys", "");
      assertNotNull(standardPieURLGenerator0);
      
      ringPlot0.setLegendLabelURLGenerator(standardPieURLGenerator0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double0 = ringPlot0.getStartAngle();
      assertEquals(90.0, double0, 0.01);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        piePlot3D0.setLegendLabelGenerator((PieSectionLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      PiePlot piePlot1 = new PiePlot();
      assertNotNull(piePlot1);
      assertTrue(piePlot1.equals((Object)piePlot0));
      assertEquals(1.0F, piePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01);
      assertTrue(piePlot1.isOutlineVisible());
      assertTrue(piePlot1.getSectionOutlinesVisible());
      assertFalse(piePlot1.isSubplot());
      assertTrue(piePlot1.isCircular());
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot1.getNoDataMessage());
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01);
      assertEquals(15, piePlot1.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot1.getSimpleLabels());
      assertEquals(0, piePlot1.getPieIndex());
      assertFalse(piePlot1.getIgnoreNullValues());
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot1.getIgnoreZeroValues());
      assertTrue(piePlot1.getLabelLinksVisible());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot1.getLabelDistributor();
      assertNotNull(abstractPieLabelDistributor0);
      assertTrue(piePlot1.equals((Object)piePlot0));
      assertEquals(1.0F, piePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01);
      assertTrue(piePlot1.isOutlineVisible());
      assertTrue(piePlot1.getSectionOutlinesVisible());
      assertFalse(piePlot1.isSubplot());
      assertTrue(piePlot1.isCircular());
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot1.getNoDataMessage());
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01);
      assertEquals(15, piePlot1.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot1.getSimpleLabels());
      assertEquals(0, piePlot1.getPieIndex());
      assertFalse(piePlot1.getIgnoreNullValues());
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot1.getIgnoreZeroValues());
      assertTrue(piePlot1.getLabelLinksVisible());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertNotSame(piePlot1, piePlot0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertNotNull(spiderWebPlot0);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      spiderWebPlot0.setWebFilled(false);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)spiderWebPlot0.getSeriesOutlineStroke(10);
      assertNotNull(basicStroke0);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setLabelLinkStroke(piePlot0.DEFAULT_LABEL_OUTLINE_STROKE);
      assertTrue(piePlot0.equals((Object)piePlot1));
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNotSame(piePlot0, piePlot1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke1 = (BasicStroke)piePlot3D0.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke1);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertSame(basicStroke1, basicStroke0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Color color0 = (Color)piePlot3D0.getLabelShadowPaint();
      assertNotNull(color0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(128, color0.getAlpha());
      assertEquals((-2137548905), color0.getRGB());
      assertEquals(151, color0.getRed());
      assertEquals(151, color0.getBlue());
      assertEquals(151, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      piePlot3D0.setSimpleLabels(true);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setSectionOutlinePaint(10, piePlot0.DEFAULT_LABEL_PAINT);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setBaseSectionPaint(piePlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.lookupSectionOutlineStroke(10);
      assertNotNull(basicStroke0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      double double0 = piePlot0.getStartAngle();
      assertEquals(90.0, double0, 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.isCircular());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        piePlot0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getLegendLabelURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot0.setLegendLabelURLGenerator((PieURLGenerator) null);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      double double0 = ringPlot0.getStartAngle();
      assertEquals(90.0, double0, 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(10);
      assertNotNull(axisLocation0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertNotNull(rectangleEdge0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ringPlot0.setMaximumLabelWidth(90.0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Comparable comparable0 = ringPlot0.getSectionKey((-2982));
      assertNotNull(comparable0);
      assertEquals((-2982), comparable0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      double double1 = ringPlot0.getStartAngle();
      assertEquals(90.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)ringPlot0.getLabelShadowPaint();
      assertNotNull(color0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(151, color0.getRed());
      assertEquals(128, color0.getAlpha());
      assertEquals((-2137548905), color0.getRGB());
      assertEquals(3, color0.getTransparency());
      assertEquals(151, color0.getGreen());
      assertEquals(151, color0.getBlue());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      double double2 = ringPlot0.getShadowXOffset();
      assertEquals(4.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot0.setIgnoreZeroValues(true);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot0.setLabelGap(90.0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot0.setSectionOutlinePaint(comparable0, color0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(151, color0.getRed());
      assertEquals(128, color0.getAlpha());
      assertEquals((-2137548905), color0.getRGB());
      assertEquals(3, color0.getTransparency());
      assertEquals(151, color0.getGreen());
      assertEquals(151, color0.getBlue());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color1 = (Color)ringPlot0.getLabelShadowPaint();
      assertNotNull(color1);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(151, color1.getGreen());
      assertEquals((-2137548905), color1.getRGB());
      assertEquals(3, color1.getTransparency());
      assertEquals(128, color1.getAlpha());
      assertEquals(151, color1.getRed());
      assertEquals(151, color1.getBlue());
      assertSame(color1, color0);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = (DefaultKeyedValuesDataset)defaultKeyedValuesDataset0.clone();
      assertNotNull(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      
      piePlot3D0.setForegroundAlpha((-4161.9F));
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals((-4161.9F), piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      boolean boolean0 = piePlot3D0.getIgnoreNullValues();
      assertFalse(boolean0);
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals((-4161.9F), piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)piePlot0.getBaseSectionOutlinePaint();
      assertNotNull(color0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      double double0 = ringPlot0.getStartAngle();
      assertEquals(90.0, double0, 0.01);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation((-1451));
      assertNotNull(axisLocation0);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertNotNull(rectangleEdge0);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      ringPlot0.setMaximumLabelWidth(0.5);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      
      ringPlot0.setInteriorGap(0.0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.0, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot0.setLabelLinkMargin(1672.1206641);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1672.1206641, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertEquals(0, defaultKeyedValuesDataset1.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      
      ringPlot0.setBaseSectionOutlineStroke(piePlot0.DEFAULT_LABEL_OUTLINE_STROKE);
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1672.1206641, piePlot0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.0, ringPlot0.getInteriorGap(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isCircular());
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        SerialUtilities.readShape((ObjectInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertFalse(piePlot0.isSubplot());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      StringContent stringContent0 = new StringContent(10);
      assertNotNull(stringContent0);
      
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      assertNotNull(plainDocument0);
      
      Color color0 = Color.getColor("", 3836);
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(252, color0.getBlue());
      assertEquals((-16773380), color0.getRGB());
      assertEquals(14, color0.getGreen());
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setBackgroundAlpha(0.0F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color1 = Color.getColor("", 1);
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      assertEquals(255, color1.getAlpha());
      assertEquals((-16777215), color1.getRGB());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(1, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertNotSame(color1, color0);
      
      Color color2 = Color.getColor("oMOW|}z", 10);
      assertNotNull(color2);
      assertFalse(color2.equals((Object)color1));
      assertFalse(color2.equals((Object)color0));
      assertEquals((-16777206), color2.getRGB());
      assertEquals(10, color2.getBlue());
      assertEquals(255, color2.getAlpha());
      assertEquals(0, color2.getGreen());
      assertEquals(0, color2.getRed());
      assertEquals(1, color2.getTransparency());
      assertNotSame(color2, color1);
      assertNotSame(color2, color0);
      
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        piePlot3D0.setInteriorGap(766.96413691);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (766.96413691) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      AbstractPieLabelDistributor abstractPieLabelDistributor0 = piePlot3D0.getLabelDistributor();
      assertNotNull(abstractPieLabelDistributor0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, abstractPieLabelDistributor0.getItemCount());
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        piePlot3D0.setBaseSectionPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      jTextPane0.write(stringWriter0);
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertEquals("", stringWriter0.toString());
      
      PieURLGenerator pieURLGenerator0 = piePlot3D0.getLegendLabelURLGenerator();
      assertNull(pieURLGenerator0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = piePlot3D0.getSectionOutlinesVisible();
      assertTrue(boolean0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        piePlot3D0.setInteriorGap((-585.55582242));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (-585.55582242) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      jTextPane0.write(stringWriter0);
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals("", stringWriter0.toString());
      
      Color color0 = jTextPane0.getSelectionColor();
      assertNotNull(color0);
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(207, color0.getGreen());
      assertEquals(184, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(229, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-4665371), color0.getRGB());
      
      Color color1 = Color.getColor("Invalid 'percent' (", color0);
      assertNotNull(color1);
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(207, color0.getGreen());
      assertEquals(184, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(229, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-4665371), color0.getRGB());
      assertEquals(184, color1.getRed());
      assertEquals(207, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals((-4665371), color1.getRGB());
      assertEquals(229, color1.getBlue());
      assertSame(color0, color1);
      assertSame(color1, color0);
      
      piePlot0.setBaseSectionPaint(color1);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(207, color0.getGreen());
      assertEquals(184, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(229, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-4665371), color0.getRGB());
      assertEquals(184, color1.getRed());
      assertEquals(207, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals((-4665371), color1.getRGB());
      assertEquals(229, color1.getBlue());
      assertSame(color0, color1);
      assertSame(color1, color0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PieURLGenerator pieURLGenerator0 = piePlot0.getLegendLabelURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      boolean boolean0 = piePlot0.getSectionOutlinesVisible();
      assertTrue(boolean0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      double double0 = piePlot0.getInteriorGap();
      assertEquals(0.08, double0, 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      // Undeclared exception!
      try { 
        piePlot0.setInteriorGap((-1521.364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (-1521.364) argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      
      piePlot3D0.setLabelPadding(rectangleInsets0);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      SystemColor systemColor0 = SystemColor.controlText;
      assertNotNull(systemColor0);
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getGreen());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      
      Color color0 = Color.getColor("Null 'padding' argument.", (-2780));
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(36, color0.getBlue());
      assertEquals(245, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals((-2780), color0.getRGB());
      
      piePlot3D0.setBackgroundAlpha((-2780));
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals((-2780.0F), piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color1 = Color.getColor("SfpWX.9|x", (-2780));
      assertNotNull(color1);
      assertTrue(color1.equals((Object)color0));
      assertEquals(245, color1.getGreen());
      assertEquals((-2780), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getRed());
      assertEquals(36, color1.getBlue());
      assertNotSame(color1, color0);
      
      Color color2 = Color.getColor("=p+m${!T_.wwSa6k6>O", 69);
      assertNotNull(color2);
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      assertEquals(0, color2.getRed());
      assertEquals((-16777147), color2.getRGB());
      assertEquals(69, color2.getBlue());
      assertEquals(1, color2.getTransparency());
      assertEquals(0, color2.getGreen());
      assertEquals(255, color2.getAlpha());
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      
      // Undeclared exception!
      try { 
        piePlot3D0.getArcBounds((Rectangle2D) null, (Rectangle2D) null, (-2110.6855844637666), 69, 69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Arc2D$Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertFalse(piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        piePlot0.setLabelPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot3D0.setBaseSectionPaint(piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 10);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 1.0F, 1.0F, 661.44848762503);
      assertNotNull(rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(331.724243812515, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(662.44848762503, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(661.44848762503, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)piePlot3D0.getArcBounds(rectangle2D_Double0, rectangle2D_Double0, 1.0, 1.0E-5, 0.08);
      assertNotNull(rectangle2D_Double1);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(331.724243812515, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(662.44848762503, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(662.44848762503, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(331.724243812515, rectangle2D_Double1.getCenterY(), 0.01);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(661.44848762503, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double1.y, 0.01);
      assertEquals(661.44848762503, rectangle2D_Double1.height, 0.01);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot3D0.setPieIndex(613566757);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(613566757, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      
      piePlot3D0.setLabelPadding(rectangleInsets0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      SystemColor systemColor0 = SystemColor.controlText;
      assertNotNull(systemColor0);
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getGreen());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      
      Color color0 = Color.getColor("Null 'padding' argument.", (-2780));
      assertNotNull(color0);
      assertEquals(36, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-2780), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(245, color0.getGreen());
      assertEquals(255, color0.getRed());
      
      Color color1 = Color.getColor("SfpWX.9|x", (-2780));
      assertNotNull(color1);
      assertTrue(color1.equals((Object)color0));
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(245, color1.getGreen());
      assertEquals(36, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertEquals((-2780), color1.getRGB());
      assertNotSame(color1, color0);
      
      Color color2 = Color.getColor("=p+m${!T_.wwSa6k6>O", 69);
      assertNotNull(color2);
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      assertEquals(0, color2.getGreen());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertEquals(69, color2.getBlue());
      assertEquals(0, color2.getRed());
      assertEquals((-16777147), color2.getRGB());
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        piePlot3D0.getArcBounds((Rectangle2D) null, (Rectangle2D) null, (-2110.6855844637666), 69, 69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Arc2D$Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      
      piePlot3D0.setLabelPadding(rectangleInsets0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      SystemColor systemColor0 = SystemColor.controlText;
      assertNotNull(systemColor0);
      assertEquals(0, systemColor0.getGreen());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot3D0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setLegendLabelGenerator(standardPieSectionLabelGenerator0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      // Undeclared exception!
      try { 
        piePlot3D0.getMaximumExplodePercent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      assertNotNull(candlestickRenderer0);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      
      DrawingSupplier drawingSupplier0 = candlestickRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      
      ringPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ringPlot0.setSectionOutlinesVisible(true);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      piePlot3D0.setLabelOutlineStroke(candlestickRenderer0.DEFAULT_OUTLINE_STROKE);
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)LineRenderer3D.DEFAULT_WALL_PAINT;
      assertNotNull(color0);
      assertEquals(221, color0.getRed());
      assertEquals(221, color0.getBlue());
      assertEquals(221, color0.getGreen());
      assertEquals((-2236963), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D0.setBaseSectionPaint(piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      PiePlot3D piePlot3D1 = new PiePlot3D();
      assertNotNull(piePlot3D1);
      assertFalse(piePlot3D1.equals((Object)piePlot3D0));
      assertFalse(piePlot3D1.getDarkerSides());
      assertFalse(piePlot3D1.isCircular());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D1.getSimpleLabels());
      assertFalse(piePlot3D1.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D1.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D1.isOutlineVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D1.isSubplot());
      assertTrue(piePlot3D1.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 10);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      ringPlot0.setMaximumLabelWidth(10);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(10.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertNotNull(ringPlot1);
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(10.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertFalse(ringPlot1.getSimpleLabels());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertFalse(ringPlot1.isSubplot());
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(10.0, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(0, ringPlot1.getPieIndex());
      assertTrue(ringPlot1.isOutlineVisible());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      double double0 = ringPlot0.getLabelGap();
      assertEquals(0.025, double0, 0.01);
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(10.0, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNotSame(ringPlot0, ringPlot1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      jTextPane0.write(stringWriter0);
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals("", stringWriter0.toString());
      
      PieURLGenerator pieURLGenerator0 = piePlot0.getLegendLabelURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertTrue(piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(10, 1569);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertNotNull(candlestickRenderer0);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      DrawingSupplier drawingSupplier0 = candlestickRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      ringPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(2, true);
      assertNotNull(color0);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ringPlot0.setSectionOutlinesVisible(false);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      assertNotNull(customPieURLGenerator0);
      assertEquals(0, customPieURLGenerator0.getListCount());
      
      ringPlot0.setLabelShadowPaint(candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      double double0 = ringPlot0.getLabelGap();
      assertEquals(0.025, double0, 0.01);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ringPlot0.setLegendItemShape(candlestickRenderer0.DEFAULT_SHAPE);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(candlestickRenderer0.ZERO, false);
      assertNotNull(basicStroke0);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      Color color1 = (Color)ringPlot0.getBaseSectionOutlinePaint();
      assertNotNull(color1);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals((-8355712), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(128, color1.getBlue());
      assertEquals(128, color1.getGreen());
      assertEquals(128, color1.getRed());
      assertSame(color1, color0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      boolean boolean0 = ringPlot0.getSectionOutlinesVisible();
      assertFalse(boolean0);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)ringPlot0.getLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ringPlot0.setLabelGenerator(standardPieSectionLabelGenerator0);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertFalse(ringPlot0.getSectionOutlinesVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color1 = (Color)combinedRangeCategoryPlot0.getDomainGridlinePaint();
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals((-1), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getGreen());
      assertNotSame(color1, color0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot3D0.setBaseSectionOutlinePaint(color1);
      assertFalse(color1.equals((Object)color0));
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals((-1), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getGreen());
      assertNotSame(color1, color0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot3D0.setShadowYOffset(5111.551781);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(5111.551781, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      piePlot3D0.setLabelOutlineStroke(combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(5111.551781, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color2 = (Color)piePlot3D0.getShadowPaint();
      assertNotNull(color2);
      assertFalse(color2.equals((Object)color1));
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(5111.551781, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(128, color2.getGreen());
      assertEquals(128, color2.getRed());
      assertEquals(128, color2.getBlue());
      assertEquals((-8355712), color2.getRGB());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertNotSame(color2, color1);
      assertSame(color2, color0);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)piePlot3D0.getLegendItemShape();
      assertNotNull(ellipse2D_Double0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(5111.551781, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals((-4.0), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(4.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals((-4.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-4.0), ellipse2D_Double0.y, 0.01);
      assertEquals(8.0, ellipse2D_Double0.height, 0.01);
      assertEquals((-4.0), ellipse2D_Double0.x, 0.01);
      assertEquals(8.0, ellipse2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertNotNull(defaultPolarItemRenderer0);
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      BasicStroke basicStroke0 = (BasicStroke)defaultPolarItemRenderer0.lookupSeriesStroke(10);
      assertNotNull(basicStroke0);
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultPolarItemRenderer0.getBaseStroke();
      assertNotNull(basicStroke1);
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertSame(basicStroke1, basicStroke0);
      
      piePlot0.setSectionOutlinesVisible(false);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot0.setLabelOutlineStroke(basicStroke1);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertSame(basicStroke1, basicStroke0);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot0.setSimpleLabels(false);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      PieURLGenerator pieURLGenerator0 = piePlot0.getLegendLabelURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Color color0 = (Color)piePlot0.getLabelBackgroundPaint();
      assertNotNull(color0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals((-64), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      boolean boolean0 = piePlot0.getLabelLinksVisible();
      assertTrue(boolean0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot0.setStartAngle((double) defaultPolarItemRenderer0.ZERO);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot0.setLabelShadowPaint(color0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals((-64), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)piePlot0.getLegendItemShape();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(4.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals((-4.0), ellipse2D_Double0.getMinX(), 0.01);
      assertEquals((-4.0), ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(4.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals((-4.0), ellipse2D_Double0.y, 0.01);
      assertEquals(8.0, ellipse2D_Double0.height, 0.01);
      assertEquals((-4.0), ellipse2D_Double0.x, 0.01);
      assertEquals(8.0, ellipse2D_Double0.width, 0.01);
      
      piePlot0.setSectionPaint(defaultPolarItemRenderer0.ZERO, defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      piePlot0.setMaximumLabelWidth(0.4);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertNull(piePlot0.getNoDataMessage());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.isSubplot());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.4, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertNull(legendItemCollection0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot0.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      defaultPieDataset0.addChangeListener(multiplePiePlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      defaultPieDataset0.sortByKeys(sortOrder0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      boolean boolean0 = piePlot0.isCircular();
      assertTrue(boolean0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot0.setBaseSectionOutlinePaint(multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot0.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      BasicStroke basicStroke1 = (BasicStroke)piePlot0.getLabelOutlineStroke();
      assertNotNull(basicStroke1);
      assertTrue(basicStroke1.equals((Object)basicStroke0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertNotSame(basicStroke1, basicStroke0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot0.setLabelShadowPaint(multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Paint paint0 = piePlot0.getSectionPaint(10);
      assertNull(paint0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(piePlot0.isOutlineVisible());
      assertFalse(piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01);
      assertTrue(piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot0.isSubplot());
      assertTrue(piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01);
      assertFalse(piePlot0.getIgnoreNullValues());
      assertFalse(piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(1.0E-5, true);
      assertNotNull(color0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(255, color0.getRed());
      assertEquals(85, color0.getGreen());
      assertEquals((-43691), color0.getRGB());
      assertEquals(85, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      RingPlot ringPlot1 = new RingPlot(defaultPieDataset0);
      assertNotNull(ringPlot1);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot1.getPieIndex());
      assertNull(ringPlot1.getNoDataMessage());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertTrue(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      ringPlot1.setSectionOutlinesVisible(false);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot1.getPieIndex());
      assertNull(ringPlot1.getNoDataMessage());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertFalse(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      RingPlot ringPlot2 = new RingPlot();
      assertNotNull(ringPlot2);
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertFalse(ringPlot2.equals((Object)ringPlot1));
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.025, ringPlot2.getLabelGap(), 0.01);
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertTrue(ringPlot2.isOutlineVisible());
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot2.getPieIndex());
      assertFalse(ringPlot2.isSubplot());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertTrue(ringPlot2.isCircular());
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      PieURLGenerator pieURLGenerator0 = ringPlot2.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertFalse(ringPlot2.equals((Object)ringPlot1));
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.025, ringPlot2.getLabelGap(), 0.01);
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertTrue(ringPlot2.isOutlineVisible());
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot2.getPieIndex());
      assertFalse(ringPlot2.isSubplot());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertTrue(ringPlot2.isCircular());
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertNotSame(ringPlot2, ringPlot0);
      assertNotSame(ringPlot2, ringPlot1);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      ringPlot0.setLabelShadowPaint(ringPlot2.DEFAULT_LABEL_SHADOW_PAINT);
      assertFalse(ringPlot2.equals((Object)ringPlot0));
      assertFalse(ringPlot2.equals((Object)ringPlot1));
      assertFalse(ringPlot0.equals((Object)ringPlot2));
      assertFalse(ringPlot0.equals((Object)ringPlot1));
      assertTrue(ringPlot2.getSeparatorsVisible());
      assertEquals(4.0, ringPlot2.getShadowXOffset(), 0.01);
      assertEquals(0.14, ringPlot2.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot2.getBackgroundImageAlignment());
      assertFalse(ringPlot2.getSimpleLabels());
      assertEquals(0.025, ringPlot2.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot2.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot2.getNoDataMessage());
      assertEquals(0.025, ringPlot2.getLabelGap(), 0.01);
      assertFalse(ringPlot2.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot2.getLabelLinksVisible());
      assertFalse(ringPlot2.getIgnoreZeroValues());
      assertTrue(ringPlot2.isOutlineVisible());
      assertEquals(0.2, ringPlot2.getSectionDepth(), 0.01);
      assertEquals(1.0F, ringPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot2.getInteriorGap(), 0.01);
      assertEquals(0, ringPlot2.getPieIndex());
      assertFalse(ringPlot2.isSubplot());
      assertEquals(0.2, ringPlot2.getInnerSeparatorExtension(), 0.01);
      assertTrue(ringPlot2.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot2.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot2.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot2.getStartAngle(), 0.01);
      assertTrue(ringPlot2.isCircular());
      assertEquals(1.0F, ringPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertTrue(ringPlot0.isOutlineVisible());
      assertFalse(ringPlot0.isSubplot());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertNotSame(ringPlot2, ringPlot0);
      assertNotSame(ringPlot2, ringPlot1);
      assertNotSame(ringPlot0, ringPlot2);
      assertNotSame(ringPlot0, ringPlot1);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      double double0 = ringPlot1.getLabelGap();
      assertEquals(0.025, double0, 0.01);
      assertFalse(ringPlot1.equals((Object)ringPlot0));
      assertFalse(ringPlot1.equals((Object)ringPlot2));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(ringPlot1.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot1.getSeparatorsVisible());
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01);
      assertFalse(ringPlot1.getSimpleLabels());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot1.getPieIndex());
      assertNull(ringPlot1.getNoDataMessage());
      assertFalse(ringPlot1.getIgnoreNullValues());
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot1.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01);
      assertTrue(ringPlot1.isCircular());
      assertFalse(ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01);
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01);
      assertFalse(ringPlot1.isSubplot());
      assertTrue(ringPlot1.isOutlineVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01);
      assertNotSame(ringPlot1, ringPlot0);
      assertNotSame(ringPlot1, ringPlot2);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      JEditorPane jEditorPane0 = new JEditorPane();
      assertNotNull(jEditorPane0);
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertFalse(jEditorPane0.getIgnoreRepaint());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      
      Rectangle rectangle0 = jEditorPane0.modelToView((-1657));
      assertNull(rectangle0);
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertFalse(jEditorPane0.getIgnoreRepaint());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      
      // Undeclared exception!
      try { 
        ringPlot0.setLegendItemShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.plot.PiePlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      
      piePlot3D0.setBaseSectionOutlinePaint(color0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      piePlot3D0.setShadowYOffset(90.0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ringPlot0.setLabelShadowPaint(piePlot3D0.DEFAULT_LABEL_BACKGROUND_PAINT);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Double double0 = new Double(1.0F);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      ringPlot0.setLegendItemShape(piePlot3D0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(double0, true);
      assertNotNull(basicStroke0);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color1 = (Color)ringPlot0.getBaseSectionOutlinePaint();
      assertNotNull(color1);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertEquals((-8355712), color1.getRGB());
      assertEquals(128, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(128, color1.getRed());
      assertEquals(128, color1.getBlue());
      assertSame(color1, color0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      piePlot3D0.setBaseSectionPaint(piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      Paint paint0 = piePlot3D0.getSectionPaint(integer0);
      assertNull(paint0);
      assertFalse(piePlot3D0.isSubplot());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      
      double double0 = ringPlot0.getInteriorGap();
      assertEquals(0.08, double0, 0.01);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01);
      assertFalse(ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
      assertTrue(ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01);
      assertTrue(ringPlot0.isCircular());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01);
      assertTrue(ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01);
      assertFalse(ringPlot0.getSimpleLabels());
      assertFalse(ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.getLegendLabelURLGenerator();
      ringPlot0.setLegendLabelURLGenerator((PieURLGenerator) null);
      ringPlot0.getStartAngle();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(10);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      ringPlot0.setMaximumLabelWidth(90.0);
      ringPlot0.getLegendItems();
      Comparable comparable0 = ringPlot0.getSectionKey((-2982));
      ringPlot0.getStartAngle();
      Paint paint0 = ringPlot0.getLabelShadowPaint();
      ringPlot0.getShadowXOffset();
      ringPlot0.setIgnoreZeroValues(true);
      ringPlot0.setLabelGap(90.0);
      ringPlot0.setSectionOutlinePaint(comparable0, paint0);
      ringPlot0.getLabelShadowPaint();
      ringPlot0.getLabelOutlineStroke();
      ringPlot0.getLegendItems();
      assertEquals(90.0, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      piePlot3D0.setBaseSectionOutlinePaint(color0);
      piePlot3D0.setBaseSectionPaint(color0);
      piePlot3D0.setLabelOutlineStroke(piePlot3D0.DEFAULT_OUTLINE_STROKE);
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.lookupSectionOutlineStroke(10);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      defaultPieDataset0.addChangeListener(multiplePiePlot0);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByKeys(sortOrder0);
      PiePlot piePlot0 = new PiePlot(defaultPieDataset0);
      piePlot0.isCircular();
      piePlot0.setBaseSectionOutlinePaint(multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      piePlot0.getBaseSectionOutlineStroke();
      piePlot0.getLabelOutlineStroke();
      piePlot0.setLabelShadowPaint(multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      piePlot0.getSectionPaint(10);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'generator' argument.", multiplePiePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, (-2893), 3703, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 3703
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:45:50 GMT 2021
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Abs;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Atanh;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Power;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Ulp;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      Logit logit0 = new Logit(1384, 1384);
      assertNotNull(logit0);
      
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      assertNotNull(univariateRealFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(1384, univariateRealFunction0, 0.0, 0.008333333333329196, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.004166666666664598, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.008333333333329196, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(64.549218651, (-1969.112842787287));
      assertNotNull(pegasusSolver0);
      assertEquals(64.549218651, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1969.112842787287), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      Sigmoid sigmoid0 = new Sigmoid(0.0, 0.0);
      assertNotNull(sigmoid0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(178, (UnivariateRealFunction) sigmoid0, 2.7045E-320, 2.816E-321, (double) 178, allowedSolution0);
      assertEquals(2.7045E-320, double0, 0.01);
      assertEquals(64.549218651, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1969.112842787287), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(178.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.7045E-320, pegasusSolver0.getMin(), 0.01);
      assertEquals(2.816E-321, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(64.549218651, (-1969.112842787287));
      assertNotNull(pegasusSolver0);
      assertEquals((-1969.112842787287), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(64.549218651, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      Sigmoid sigmoid0 = new Sigmoid(0.0, 0.0);
      assertNotNull(sigmoid0);
      
      double double0 = pegasusSolver0.solve(178, (UnivariateRealFunction) sigmoid0, (-0.0010544378664194586), (-583.991842), (-0.0010544378664194586));
      assertEquals((-0.0010544378664194586), double0, 0.01);
      assertEquals((-0.0010544378664194586), pegasusSolver0.getMin(), 0.01);
      assertEquals((-1969.112842787287), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-583.991842), pegasusSolver0.getMax(), 0.01);
      assertEquals(64.549218651, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-0.0010544378664194586), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2879.08942795), 831.6126615521317, (-1219.9));
      assertNotNull(pegasusSolver0);
      assertEquals(831.6126615521317, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-1219.9), pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-2879.08942795), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(325, (UnivariateRealFunction) sinc0, (-702.91355), (double) 750, allowedSolution0);
      assertEquals((-702.91355), double0, 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-1219.9), pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(750.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-2879.08942795), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-702.91355), pegasusSolver0.getMin(), 0.01);
      assertEquals(23.543225000000007, pegasusSolver0.getStartValue(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals(double1, double0, 0.01);
      assertEquals((-702.91355), double1, 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-1219.9), pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(750.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-2879.08942795), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-702.91355), pegasusSolver0.getMin(), 0.01);
      assertEquals(23.543225000000007, pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2879.08942795), 831.6126615521317, (-1219.9));
      assertNotNull(pegasusSolver0);
      assertEquals((-2879.08942795), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-1219.9), pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve((-1470), (UnivariateRealFunction) sinc0, 0.05701809761842469, (-1.1914680776940667E-6), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,470) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      
      Atanh atanh0 = new Atanh();
      assertNotNull(atanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2146981713, (UnivariateRealFunction) atanh0, (double) 2146981713, 0.6366197723675814, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2,146,981,713, 0.637]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(901.4550351);
      assertNotNull(illinoisSolver0);
      assertEquals(901.4550351, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-457), (UnivariateRealFunction) null, 9.219544613762692E-9, (double) (-457), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1, (UnivariateRealFunction) cbrt0, (double) 1, (double) 1, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1335.812), (-1335.812), (-1335.812));
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals((-1335.812), illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1335.812), illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1335.812), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      
      Ulp ulp0 = new Ulp();
      assertNotNull(ulp0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(Integer.MAX_VALUE, (UnivariateRealFunction) ulp0, (-148.8), (-1335.812), (double) Integer.MAX_VALUE, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-148.8, -1,335.812]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1335.812));
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-1335.812), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(5, (UnivariateRealFunction) null, (double) 5, 2136.011743120646, 6.344780561308204E-307, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      assertNotNull(pegasusSolver0);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-948.3726181), 0.036, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,942) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(947.3007062172478, (-4274.003792), 831.6126615521317);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(947.3007062172478, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-4274.003792), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve((-300228), (UnivariateRealFunction) sinc0, (double) 2146981313, (double) 2146981313, 0.5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-300,228) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1311.37527312);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1311.37527312, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      Abs abs0 = new Abs();
      assertNotNull(abs0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(43285, (UnivariateRealFunction) abs0, (double) 43285, (double) 43285, 1311.37527312);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [43,285, 43,285]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(Integer.MAX_VALUE, (UnivariateRealFunction) inverse0, 901.4550351, (double) Integer.MAX_VALUE, 1.764E-321);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [901.455, 2,147,483,647], values: [0.001, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1335.812));
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1335.812), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      
      Ulp ulp0 = new Ulp();
      assertNotNull(ulp0);
      
      regulaFalsiSolver0.setup(121, ulp0, 121, (-3661.9322300862373), (-308.65));
      assertEquals((-308.65), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3661.9322300862373), regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(121.0, regulaFalsiSolver0.getMin(), 0.01);
      
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [121, -3,661.932]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2879.08942795), 831.6126615521317, (-1219.9));
      assertNotNull(pegasusSolver0);
      assertEquals((-2879.08942795), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1219.9), pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2572493, (UnivariateRealFunction) sinc0, (-702.91355), 9.934306003893687E-4, allowedSolution0);
      assertEquals(9.934306003893687E-4, double0, 0.01);
      assertEquals((-2879.08942795), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-351.4562782846998), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1219.9), pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-702.91355), pegasusSolver0.getMin(), 0.01);
      assertEquals(9.934306003893687E-4, pegasusSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2879.08942795), 831.6126615521317, (-1219.9));
      assertNotNull(pegasusSolver0);
      assertEquals((-2879.08942795), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-1219.9), pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(750, (UnivariateRealFunction) sinc0, 13.0, 312.915, allowedSolution0);
      assertEquals(287.2324828176867, double0, 0.01);
      assertEquals((-2879.08942795), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(13.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(312.915, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1219.9), pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(162.9575, pegasusSolver0.getStartValue(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals(double1, double0, 0.01);
      assertEquals(287.2324828176867, double1, 0.01);
      assertEquals((-2879.08942795), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(13.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(312.915, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1219.9), pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(162.9575, pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1498181.7086540821, 6.555191826445683E-17, (-4274.003792));
      assertNotNull(pegasusSolver0);
      assertEquals(6.555191826445683E-17, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-4274.003792), pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1498181.7086540821, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(325, (UnivariateRealFunction) cos0, (-2947.9), (-2453.129429094), allowedSolution0);
      assertEquals((-2778.9411315117636), double0, 0.01);
      assertEquals(6.555191826445683E-17, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-2947.9), pegasusSolver0.getMin(), 0.01);
      assertEquals((-2700.514714547), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4274.003792), pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-2453.129429094), pegasusSolver0.getMax(), 0.01);
      assertEquals(1498181.7086540821, pegasusSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, 831.6126615521317, 0.0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(325, (UnivariateRealFunction) sinc0, 0.1666666505023083, 947.3007062172478, allowedSolution0);
      assertEquals(946.3034180107436, double0, 0.01);
      assertEquals(473.73368643387505, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(947.3007062172478, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.1666666505023083, pegasusSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double0 = pegasusSolver0.solve(2935, (UnivariateRealFunction) inverse0, (-948.3726181), (double) 2935, (-948.3726181));
      assertEquals(105.00861475962745, double0, 0.01);
      assertEquals((-948.3726181), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2935.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-948.3726181), pegasusSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(947.3007062172478, (-4274.003792), 831.6126615521317);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-4274.003792), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(947.3007062172478, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(325, (UnivariateRealFunction) sinc0, 9.45604636287568E-12, (double) 325, allowedSolution0);
      assertEquals(324.0149583630633, double0, 0.01);
      assertEquals(162.50000000000475, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4274.003792), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(9.45604636287568E-12, pegasusSolver0.getMin(), 0.01);
      assertEquals(947.3007062172478, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(325.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(831.6126615521317, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-3323.8599141750547), (-2962.7), 2674.642407048);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2962.7), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-3323.8599141750547), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(2674.642407048, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(750, (UnivariateRealFunction) cos0, (-2947.9), 2674.642407048, allowedSolution0);
      assertEquals(2499.0058563484886, double0, 0.01);
      assertEquals((-2947.9), pegasusSolver0.getMin(), 0.01);
      assertEquals(2674.642407048, pegasusSolver0.getMax(), 0.01);
      assertEquals((-2962.7), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-136.62879647599993), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-3323.8599141750547), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2674.642407048, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      double double0 = pegasusSolver0.solve(2146981313, (UnivariateRealFunction) atan0, (-0.09088450866185192), (double) 2146981313, (double) 2146981313, allowedSolution0);
      assertEquals((-5.716956233264294E-18), double0, 0.01);
      assertEquals(2.146981313E9, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-0.09088450866185192), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2.146981313E9, pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver((-4274.003792), (-4274.003792), 855.4956208);
      assertNotNull(pegasusSolver0);
      assertEquals((-4274.003792), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4274.003792), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(855.4956208, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(79, (UnivariateRealFunction) sinc0, 855.4956208, 1864.2, allowedSolution0);
      assertEquals(907.2592206280813, double0, 0.01);
      assertEquals((-4274.003792), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-4274.003792), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1359.8478104, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(855.4956208, pegasusSolver0.getMin(), 0.01);
      assertEquals(1864.2, pegasusSolver0.getMax(), 0.01);
      assertEquals(855.4956208, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(426.068738, 4.396605282730955, 2529.2009307308967);
      assertNotNull(pegasusSolver0);
      assertEquals(426.068738, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(4.396605282730955, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2529.2009307308967, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2295, (UnivariateRealFunction) sinc0, (-4274.003792), 4.396605282730955, allowedSolution0);
      assertEquals(4.396605282730955, double0, 0.01);
      assertEquals(426.068738, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-4274.003792), pegasusSolver0.getMin(), 0.01);
      assertEquals(4.396605282730955, pegasusSolver0.getMax(), 0.01);
      assertEquals((-2134.8035933586348), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(4.396605282730955, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2529.2009307308967, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      double double0 = pegasusSolver0.solve(2146981313, (UnivariateRealFunction) atan0, (-0.0010968808067550089), (double) 2146981313, (double) 2146981313, allowedSolution0);
      assertEquals((-5.191696233008514E-13), double0, 0.01);
      assertEquals(2.146981313E9, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-0.0010968808067550089), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2.146981313E9, pegasusSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351);
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-948.3726181), 4.58066378482456E-307, (-7.16589238359489E305), allowedSolution0);
      assertEquals((-948.3726181), pegasusSolver0.getMin(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0, 1.0);
      Power power0 = new Power((-1335.812));
      double double0 = pegasusSolver0.solve(2121, (UnivariateRealFunction) power0, (-1335.812), 910.5418709772669, 910.5418709772669);
      assertEquals((-1335.812), pegasusSolver0.getMin(), 0.01);
      assertEquals(910.5418709772669, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351);
      Identity identity0 = new Identity();
      double double0 = pegasusSolver0.solve(2147483639, (UnivariateRealFunction) identity0, 0.0, 1.0E-6, 0.0);
      assertEquals(1.0E-6, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2879.08942795), 831.6126615521317, (-1219.9));
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(325, (UnivariateRealFunction) sinc0, (-702.91355), (double) 750, allowedSolution0);
      assertEquals((-702.91355), pegasusSolver0.getMin(), 0.01);
      assertEquals(34.45078097426119, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792));
      Sinc sinc0 = new Sinc();
      regulaFalsiSolver0.solve(750, (UnivariateRealFunction) sinc0, 4.396605282730955, (double) 750, 4.396605282730955);
  }
}

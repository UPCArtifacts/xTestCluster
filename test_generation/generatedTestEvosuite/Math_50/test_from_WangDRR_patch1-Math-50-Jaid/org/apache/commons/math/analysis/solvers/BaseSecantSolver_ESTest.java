/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 18:30:38 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Atanh;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.function.Ulp;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4275.253849171338));
      Ceil ceil0 = new Ceil();
      double double0 = regulaFalsiSolver0.solve(750, (UnivariateRealFunction) ceil0, (-4275.253849171338), 5.0, 1821.2);
      assertEquals(1821.2, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2.965527702540882E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-4454.68));
      Exp exp0 = new Exp();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(12, (UnivariateRealFunction) exp0, 0.0, (-746.7423950658351), allowedSolution0);
      assertEquals((-373.37119753291756), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-746.7423950658351), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      Logit logit0 = new Logit(1384, 1384);
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(1384, univariateRealFunction0, 0.0, 0.008333333333329196, allowedSolution0);
      assertEquals(0.008333333333329196, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1510, (UnivariateRealFunction) inverse0, (-1743.7317174549958), 1005.1, allowedSolution0);
      assertEquals((-369.3158587274979), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2.492075049226988E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Minus minus0 = new Minus();
      regulaFalsiSolver0.solve(6994, (UnivariateRealFunction) minus0, (-982.702270340087), 878.602482107, (-353341.03675506345));
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals((-353341.03675506345), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792));
      Sinc sinc0 = new Sinc();
      regulaFalsiSolver0.solve(750, (UnivariateRealFunction) sinc0, 4.396605282730955, (double) 750, 4.396605282730955);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(4.396605282730955, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(747.6990515543708, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      regulaFalsiSolver0.solve(2942, (UnivariateRealFunction) sinc0, (-1743.7317174549958), 8.21341588387037E-8, (double) 2942);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(8.21341588387037E-8, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1743.5839227423353), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Atanh atanh0 = new Atanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-222), (UnivariateRealFunction) atanh0, (double) (-222), 143.66353018146953, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-222) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(0, (UnivariateRealFunction) null, (double) 0, (double) 0, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Ulp ulp0 = new Ulp();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-1), (UnivariateRealFunction) ulp0, (double) (-1), (double) (-1), (double) (-1), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(172, (UnivariateRealFunction) sinc0, (double) 172, (double) 172, (double) 172, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [172, 172]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(150, (UnivariateRealFunction) cbrt0, (double) 150, 1559.0, (double) 150, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [150, 1,559], values: [5.313, 11.595]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1743.7317174549958), (-1743.7317174549958), (-1743.7317174549958));
      Inverse inverse0 = new Inverse();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2516, (UnivariateRealFunction) inverse0, (-1743.7317174549958), (double) 2516, (double) 2516);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,516) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Atan atan0 = new Atan();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-4401), (UnivariateRealFunction) atan0, (double) (-4401), (double) (-4401), (double) (-4401));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-4,401) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver(7.41415866247346E-12, 2728.0, 602.6250661834749);
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(3, (UnivariateRealFunction) sinc0, (double) 750, (double) 750, 4.084981309154749E-308);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [750, 750]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1026, (UnivariateRealFunction) null, (double) 1026, (double) 1026, 846.88196);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792));
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4243.080841980632));
      Sinc sinc0 = new Sinc();
      regulaFalsiSolver0.setup(135, sinc0, 135, (-4243.080841980632), (-266.953944));
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [135, -4,243.081]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-963.2524071297), 127.0, (-1835.52062081));
      double double0 = pegasusSolver0.solve(272, (UnivariateRealFunction) harmonicOscillator0, (-1835.52062081), 513.5813474, 1024.0, allowedSolution0);
      assertEquals(1024.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1806.9951438604403), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-963.2524071297), 127.0, (-1835.52062081));
      double double0 = pegasusSolver0.solve(272, (UnivariateRealFunction) harmonicOscillator0, (-1835.52062081), 513.5813474, 1024.0, allowedSolution0);
      assertEquals(1024.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1807.757619136006), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2929, (UnivariateRealFunction) inverse0, (-1743.73172), 25202.222037459058, (-1743.73172), allowedSolution0);
      assertEquals((-1743.73172), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(8.230215944976564E-8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-1743.7317174549958), 25202.222037459058, (-1743.7317174549958), allowedSolution0);
      assertEquals((-8.665026749422105E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-424709.47079627827), 1.591760129132831E11, 807.22418874);
      double double0 = pegasusSolver0.solve(2175, (UnivariateRealFunction) harmonicOscillator0, (-4274.003792), 513.5813474, (double) 2175, allowedSolution0);
      assertEquals(2175.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(436.53259079188285, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-963.2524071297), 151.36673301509757, (-1835.52062081));
      double double0 = pegasusSolver0.solve(272, (UnivariateRealFunction) harmonicOscillator0, (-1835.52062081), 513.5813474, 1024.0, allowedSolution0);
      assertEquals(1024.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1812.6451502488426), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Inverse inverse0 = new Inverse();
      double double0 = pegasusSolver0.solve(3717, (UnivariateRealFunction) inverse0, (-2385.30082069679), 25202.222037459058, 0.008336750013465571);
      assertEquals(0.008336750013465571, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.6972452299512888E-8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Minus minus0 = new Minus();
      PegasusSolver pegasusSolver0 = new PegasusSolver(819, 2634.85379972637);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(819, (UnivariateRealFunction) minus0, (-4274.003792), 2634.85379972637, (double) 819, allowedSolution0);
      assertEquals(819.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(4.547473508864641E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Minus minus0 = new Minus();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2634.85379972637, 819, 819);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(819, (UnivariateRealFunction) minus0, (-4274.003792), 2634.85379972637, (double) 819, allowedSolution0);
      assertEquals(819.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(4.547473508864641E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4275.253849171338));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(750, (UnivariateRealFunction) sinc0, (-4275.253849171338), 939.3825615181225, (double) 750, allowedSolution0);
      assertEquals(750.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-452.3893421169302), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4275.253849171338));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(42, (UnivariateRealFunction) sinc0, (-2429.84075), 3437.1854, (double) 42, allowedSolution0);
      assertEquals(3437.1854, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(2563.539605329271, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Minus minus0 = new Minus();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2634.85379972637, 819, 819);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(819, (UnivariateRealFunction) minus0, (-4274.003792), 2634.85379972637, (double) 819, allowedSolution0);
      assertEquals(2634.85379972637, pegasusSolver0.getMax(), 0.01);
      assertEquals((-2.0194839173657902E-28), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(2942, (UnivariateRealFunction) sinc0, (double) 2942, 9.610847742447468E305, 1.0E-6, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sinc sinc0 = new Sinc();
      double double0 = illinoisSolver0.solve(1017, (UnivariateRealFunction) sinc0, (-94.345254473593), (double) 1017, (-94.345254473593));
      assertEquals((-94.345254473593), illinoisSolver0.getMin(), 0.01);
      assertEquals(637.743308678728, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Minus minus0 = new Minus();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2634.85379972637, 819, 819);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(819, (UnivariateRealFunction) minus0, (-4278.443581535219), 2634.85379972637, (double) 819, allowedSolution0);
      assertEquals(2634.85379972637, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Gaussian gaussian0 = new Gaussian();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(69, (UnivariateRealFunction) gaussian0, (double) 69, (double) 69, allowedSolution0);
      assertEquals(69.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(69.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-963.2524071297), 127.0, (-1835.52062081));
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1335.812));
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(272, (UnivariateRealFunction) harmonicOscillator0, 1.34217729E8, 1.375, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [134,217,729, 1.375]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(3.6036956652707115E-6, 3.6036956652707115E-6);
      Tanh tanh0 = new Tanh();
      regulaFalsiSolver0.setup(2147480238, tanh0, 3.6036956652707115E-6, 2147480238, 3077.11);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 2,147,480,238], values: [0, 1]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }
}

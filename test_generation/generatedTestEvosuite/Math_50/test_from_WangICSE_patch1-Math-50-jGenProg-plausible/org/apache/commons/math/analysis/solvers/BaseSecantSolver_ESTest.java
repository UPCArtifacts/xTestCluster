/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 18:18:27 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asin;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Log1p;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Sqrt;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1702.583055726637), (-1702.583055726637), (-1702.583055726637));
      assertNotNull(illinoisSolver0);
      assertEquals((-1702.583055726637), illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1702.583055726637), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals((-1702.583055726637), illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      
      Log log0 = new Log();
      assertNotNull(log0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(126319915, (UnivariateRealFunction) log0, 5.33850173E-316, (double) 126319915, allowedSolution0);
      assertEquals(1.0, double0, 0.01);
      assertEquals((-1702.583055726637), illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(5.33850173E-316, illinoisSolver0.getMin(), 0.01);
      assertEquals((-1702.583055726637), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(6.31599575E7, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.26319915E8, illinoisSolver0.getMax(), 0.01);
      assertEquals((-1702.583055726637), illinoisSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(54, (UnivariateRealFunction) signum0, 0.0, 2.69834E-319, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.3492E-319, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.69834E-319, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      assertNotNull(pegasusSolver0);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2147469420, (UnivariateRealFunction) signum0, 0.0, (-3089.252), (-1702.583055726637), allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-3089.252), pegasusSolver0.getMax(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 9.85016222337805E-7, 4977.1562019);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(4977.1562019, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(9.85016222337805E-7, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      
      double double0 = regulaFalsiSolver0.solve(810, (UnivariateRealFunction) signum0, (-948.3726181), 1.0E-6, 2.364038933610732E-5, allowedSolution0);
      assertEquals(1.1675917068496346E-7, double0, 0.01);
      assertEquals(4977.1562019, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(2.364038933610732E-5, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-948.3726181), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(9.85016222337805E-7, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      
      double double1 = regulaFalsiSolver0.doSolve();
      assertEquals(double1, double0, 0.01);
      assertEquals(1.1675917068496346E-7, double1, 0.01);
      assertEquals(4977.1562019, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(2.364038933610732E-5, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-948.3726181), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(9.85016222337805E-7, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2937, (UnivariateRealFunction) inverse0, (-1702.583055726637), 2432.049, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,937) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-948.3726181), 2147469420, 2147469420);
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-948.3726181), regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2.14746942E9, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2.14746942E9, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1, (UnivariateRealFunction) signum0, (double) 1, 516.4, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      
      Log log0 = new Log();
      assertNotNull(log0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(126319915, (UnivariateRealFunction) log0, (-3348.4256553), 0.999999999999998, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-3,348.426, 1], values: [\uFFFD, -0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, (-3.6973056190304065E305), 1000.4416468386667);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1000.4416468386667, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-3.6973056190304065E305), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2937, (UnivariateRealFunction) inverse0, (-3380.2659), 1.0E-6, (double) 2937, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,937) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      
      Asin asin0 = new Asin();
      assertNotNull(asin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2118, (UnivariateRealFunction) asin0, (double) 2118, (-2100.84), (double) 2118, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2,118, -2,100.84]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(1445, (UnivariateRealFunction) null, (-276.2911008102504), (double) 1445, (-276.2911008102504), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637), (-1702.583055726637), (-1702.583055726637));
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2961, (UnivariateRealFunction) inverse0, (-3.6973056190304065E305), 270.38298483, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,961) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(0, (UnivariateRealFunction) signum0, (-2430.0), 3254.774625679915, (-988.4461349916231));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(228, (UnivariateRealFunction) inverse0, (double) 228, (-3400.51471317962), (double) 228);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [228, -3,400.515]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(5, (UnivariateRealFunction) null, (double) 5, (-1480.930531304), (-1480.930531304));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      double double0 = pegasusSolver0.solve(2147483601, (UnivariateRealFunction) signum0, (-1702.583055726637), 0.333333333333333, 1839.31692732833);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1839.31692732833, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.333333333333333, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1839.31692732833, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.333333333333333, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      // Undeclared exception!
      pegasusSolver0.doSolve();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2147469429, 1728.38339211, 0.5);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.5, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(1728.38339211, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2.147469429E9, illinoisSolver0.getRelativeAccuracy(), 0.01);
      
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2081.631, 2081.631, 2081.631);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      illinoisSolver0.setup(299, tan0, 766.0, 299, 2081.631);
      assertEquals(299.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(766.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getStartValue(), 0.01);
      
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [766, 299]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2081.631, 2081.631, 2081.631);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      
      Sqrt sqrt0 = new Sqrt();
      assertNotNull(sqrt0);
      
      illinoisSolver0.setup(2, sqrt0, 2, 2081.631, 1093.82713);
      assertEquals(2.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getMax(), 0.01);
      assertEquals(1093.82713, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [2, 2,081.631], values: [1.414, 45.625]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-670.76), 1.0E-6, 5.67369307825893E-4);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-670.76), regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(5.67369307825893E-4, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-670.76), (double) 2147469420, 0.1666666505023083, allowedSolution0);
      assertEquals(9.07013178933428E-7, double0, 0.01);
      assertEquals(0.1666666505023083, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2.14746942E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-670.76), regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(5.67369307825893E-4, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-670.76), regulaFalsiSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.03405150257625976);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.03405150257625976, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2937, (UnivariateRealFunction) inverse0, (-1738.66496), (double) 2937, (-1375.6927), allowedSolution0);
      assertEquals((-0.010986434902365713), double0, 0.01);
      assertEquals((-1738.66496), pegasusSolver0.getMin(), 0.01);
      assertEquals((-1375.6927), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2937.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.03405150257625976, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(1368393552, (UnivariateRealFunction) signum0, (-16.72139294832974), (double) 1368393552, allowedSolution0);
      assertEquals(8.147226223054277E-7, double0, 0.01);
      assertEquals(6.841967676393034E8, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-16.72139294832974), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.368393552E9, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-16.7213929483), 1.7795006E-316, allowedSolution0);
      assertEquals((-8.491853145989846E-7), double0, 0.01);
      assertEquals(1.7795006E-316, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-8.36069647415), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-16.7213929483), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2068.476135683504);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(2068.476135683504, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(30630929, (UnivariateRealFunction) inverse0, (-1582.35418505), 9.220590270857665E-9, 2068.476135683504, allowedSolution0);
      assertEquals(9.220590270857665E-9, double0, 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2068.476135683504, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(9.220590270857665E-9, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1582.35418505), pegasusSolver0.getMin(), 0.01);
      assertEquals(2068.476135683504, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(126319915, (UnivariateRealFunction) log0, 5.33850173E-316, (double) 126319915, allowedSolution0);
      assertEquals(6.31599575E7, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.999999999999998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(70536, (UnivariateRealFunction) signum0, (-16.7213929483), 5.832337288334E-312, allowedSolution0);
      assertEquals((-8.36069647415), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(5.832337288334E-312, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0E-6, 1.0E-6, 2147469386);
      Cbrt cbrt0 = new Cbrt();
      double double0 = regulaFalsiSolver0.solve(2770, (UnivariateRealFunction) cbrt0, (-0.16624882440418567), (double) 2147469386, allowedSolution0);
      assertEquals(2.147469386E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-0.009132786784294855), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1940513, (UnivariateRealFunction) identity0, (-73.3834240701), 4.5221930460929874E-4, (double) 1940513, allowedSolution0);
      assertEquals(1940513.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-5.421010862427522E-20), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0E-6, 1.0E-6, 2147469420);
      double double0 = regulaFalsiSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-948.3726181), 1.0E-6, (-948.3726181), allowedSolution0);
      assertEquals((-948.3726181), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.1675917068496346E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Signum signum0 = new Signum();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(3907.86059114109, 1.0E-14, 4096.7040534185);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      regulaFalsiSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-16.7213929483), 2588.45710343193, (-16.7213929483), allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals((-16.7213929483), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-16.7213929483), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2077.016663552528, 2077.016663552528, 2077.016663552528);
      Inverse inverse0 = new Inverse();
      double double0 = pegasusSolver0.solve(228, (UnivariateRealFunction) inverse0, (-957.805573159618), 2077.016663552528, 2077.016663552528);
      assertEquals(2077.016663552528, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1119.2110903929097, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2.3356751800037916E-27, 2.3356751800037916E-27, (-1984.0695557481092));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(143, (UnivariateRealFunction) inverse0, (-1.0050320305703346E27), 577.80531721, (-381.53271923), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (143) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Gaussian gaussian0 = new Gaussian();
      double double0 = illinoisSolver0.solve(35, (UnivariateRealFunction) gaussian0, 3.1675E-320, (-2585.086993424317), (-2585.086993424317));
      assertEquals((-2585.086993424317), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-2585.086993424317), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Gaussian gaussian0 = new Gaussian();
      double double0 = pegasusSolver0.solve(6314, (UnivariateRealFunction) gaussian0, (double) 6314, (double) 6314, 3217.0);
      assertEquals(6314.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(6314.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(415.0);
      double double0 = illinoisSolver0.solve(1462, (UnivariateRealFunction) inverse0, (-107.21157848793807), 782.0282, (double) 52);
      assertEquals(782.0282, illinoisSolver0.getMax(), 0.01);
      assertEquals(208.1292628808357, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-948.0631664363017), (-948.0631664363017));
      Signum signum0 = new Signum();
      double double0 = pegasusSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-948.0631664363017), (double) 2147469420, (-16.7213929483));
      assertEquals(2.14746942E9, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Log1p log1p0 = new Log1p();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(3852, (UnivariateRealFunction) log1p0, (double) 3852, (double) 3852, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [3,852, 3,852]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }
}

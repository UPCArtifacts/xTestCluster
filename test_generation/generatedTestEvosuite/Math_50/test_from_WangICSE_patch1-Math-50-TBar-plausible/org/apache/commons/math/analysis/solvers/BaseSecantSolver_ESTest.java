/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 18:25:45 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Sqrt;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-948.0631664363017), (-948.0631664363017));
      assertEquals((-948.0631664363017), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-948.0631664363017), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double0 = pegasusSolver0.solve(2937, (UnivariateRealFunction) inverse0, (-3.6973056190304065E305), 3.9736429850260626E-8, 193842.47008516412);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals((-948.0631664363017), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(3.9736429850260626E-8, pegasusSolver0.getMax(), 0.01);
      assertEquals((-3.6973056190304065E305), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(193842.47008516412, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-948.0631664363017), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(64.549218651, (-1969.112842787287));
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1969.112842787287), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(64.549218651, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Sigmoid sigmoid0 = new Sigmoid(0.0, 0.0);
      assertNotNull(sigmoid0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(178, (UnivariateRealFunction) sigmoid0, 2.7045E-320, 2.816E-321, (double) 178, allowedSolution0);
      assertEquals(2.7045E-320, double0, 0.01);
      assertEquals(2.816E-321, pegasusSolver0.getMax(), 0.01);
      assertEquals(2.7045E-320, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1969.112842787287), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(178.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(64.549218651, pegasusSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(54, (UnivariateRealFunction) signum0, 0.0, 2.69834E-319, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.3492E-319, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2.69834E-319, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2147469420, (UnivariateRealFunction) signum0, 0.0, (-3089.252), (-1702.583055726637), allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-3089.252), pegasusSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      double double0 = pegasusSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-948.3726181), (double) 2147469420, (-16.7213929483));
      assertEquals(9.753730428931196E-7, double0, 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-16.7213929483), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2.14746942E9, pegasusSolver0.getMax(), 0.01);
      assertEquals((-948.3726181), pegasusSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double0 = pegasusSolver0.solve(2937, (UnivariateRealFunction) inverse0, (-3.6973056190304065E305), 270.38298483, 0.0);
      assertEquals((-3.6973056190304065E305), double0, 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(270.38298483, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-3.6973056190304065E305), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals((-3.6973056190304065E305), double1, 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(270.38298483, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-3.6973056190304065E305), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve((-423), (UnivariateRealFunction) signum0, 2.69834E-319, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-423) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2128.4872554, 2128.4872554, 0.2);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(2128.4872554, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(2128.4872554, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.2, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-3.8122843E-316), 0.2, 4.33E-319);
      assertNotNull(harmonicOscillator0);
      
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(3066, (UnivariateRealFunction) harmonicOscillator0, 1725.2286, (-0.16624879837036133), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,725.229, -0.166]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2163, (UnivariateRealFunction) signum0, 0.5, (double) 2163, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0.5, 2,163], values: [1, 1]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2937, (UnivariateRealFunction) inverse0, (-68.21748012605), 2.718281828459045, (-1591.6835731131364), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,937) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1, (UnivariateRealFunction) cbrt0, (double) 1, (double) 1, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(747, (UnivariateRealFunction) signum0, (double) 747, (double) 747, (double) 747, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [747, 747]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1335.812));
      assertEquals((-1335.812), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(5, (UnivariateRealFunction) null, (double) 5, 2136.011743120646, 6.344780561308204E-307, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1685.94));
      assertEquals((-1685.94), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2937, (UnivariateRealFunction) inverse0, (-1685.94), (double) 2937, 80.247);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,937) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(0, (UnivariateRealFunction) signum0, (-2430.0), 3254.774625679915, (-988.4461349916231));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0E-6, 1.0E-6, 2147469420);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2.14746942E9, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(5, (UnivariateRealFunction) signum0, (-7.92542E-318), (-7.92542E-318), 184.8192269792);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-0, -0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-486.120005), (-33.0), (-33.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-486.12, -33], values: [-1, -1]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2147469429, 1728.38339211, 0.5);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(1728.38339211, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2.147469429E9, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.5, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(illinoisSolver0);
      
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2081.631, 2081.631, 2081.631);
      assertEquals(2081.631, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertNotNull(illinoisSolver0);
      
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      illinoisSolver0.setup(299, tan0, 766.0, 299, 2081.631);
      assertEquals(299.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(766.0, illinoisSolver0.getMin(), 0.01);
      
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [766, 299]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2081.631, 2081.631, 2081.631);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(illinoisSolver0);
      
      Sqrt sqrt0 = new Sqrt();
      assertNotNull(sqrt0);
      
      illinoisSolver0.setup(2, sqrt0, 2, 2081.631, 1093.82713);
      assertEquals(2.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getMax(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1093.82713, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2081.631, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [2, 2,081.631], values: [1.414, 45.625]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1693066856, (UnivariateRealFunction) inverse0, (double) (-2957), 1.0, 670.7385593, allowedSolution0);
      assertEquals(7.350544113523745E-8, double0, 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-2957.0), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(670.7385593, pegasusSolver0.getStartValue(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals(7.350544113523745E-8, double1, 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-2957.0), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(670.7385593, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(163, (UnivariateRealFunction) signum0, (-988.4461349916231), 3254.774625679915, (-2430.0), allowedSolution0);
      assertEquals((-1.2328798084382552E-7), double0, 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-2430.0), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-988.4461349916231), pegasusSolver0.getMin(), 0.01);
      assertEquals(3254.774625679915, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(1368393552, (UnivariateRealFunction) signum0, (-16.72139294832974), (double) 1368393552, allowedSolution0);
      assertEquals(8.147226223054277E-7, double0, 0.01);
      assertEquals((-16.72139294832974), pegasusSolver0.getMin(), 0.01);
      assertEquals(6.841967676393034E8, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.368393552E9, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-16.7213929483), 1.7795006E-316, allowedSolution0);
      assertEquals((-8.491853145989846E-7), double0, 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-8.36069647415), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.7795006E-316, pegasusSolver0.getMax(), 0.01);
      assertEquals((-16.7213929483), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(442, (UnivariateRealFunction) inverse0, (-3005.0), 5.194420909777103E-5, allowedSolution0);
      assertEquals(4.4349427951792906E-7, double0, 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1502.4999740278954), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(5.194420909777103E-5, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-3005.0), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(70536, (UnivariateRealFunction) signum0, (-16.7213929483), 5.832337288334E-312, allowedSolution0);
      assertEquals(5.832337288334E-312, double0, 0.01);
      assertEquals((-8.36069647415), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(5.832337288334E-312, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-16.7213929483), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-1.0), 793.6236336, (double) 2147469420, allowedSolution0);
      assertEquals((-5.010591736647732E-7), double0, 0.01);
      assertEquals((-1.0), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2.14746942E9, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(793.6236336, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2128.4872554, 2128.4872554, 0.2);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.2, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2128.4872554, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(2128.4872554, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-3.8122843E-316), 0.2, 4.33E-319);
      assertNotNull(harmonicOscillator0);
      
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      assertNotNull(univariateRealFunction0);
      
      double double0 = regulaFalsiSolver0.solve(56, univariateRealFunction0, (-1.0), 11.0, 2116.0, allowedSolution0);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(2116.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.2, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2128.4872554, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(11.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1.0), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(2128.4872554, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0E-6, 1.0E-6, 2147469420);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2.14746942E9, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      double double0 = regulaFalsiSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-948.3726181), 1.0E-6, (-948.3726181), allowedSolution0);
      assertEquals((-474.18630855), double0, 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-948.3726181), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-948.3726181), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(2.14746942E9, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0E-6, 1.0E-6, 2147469420);
      assertEquals(1.0E-6, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2.14746942E9, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      double double0 = regulaFalsiSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-948.3726181), 1.0E-6, (-948.3726181), allowedSolution0);
      assertEquals(1.1675917068496346E-7, double0, 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-948.3726181), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(2.14746942E9, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-948.3726181), regulaFalsiSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1555.2172), (-650.0784694929), 3490.0078313);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      Log log0 = new Log();
      double double0 = regulaFalsiSolver0.solve(1218, (UnivariateRealFunction) log0, 1.2594216536000371E-6, 9.89354927101, 2.4612095652529957E-4, allowedSolution0);
      assertEquals(0.9999999999999266, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0E-6, 1.0E-6, 2147469420);
      double double0 = regulaFalsiSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-948.3726181), 1.0E-6, (-948.3726181), allowedSolution0);
      assertEquals((-948.3726181), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.1675917068496346E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Gaussian gaussian0 = new Gaussian();
      double double0 = illinoisSolver0.solve(35, (UnivariateRealFunction) gaussian0, 3.1675E-320, (-2585.086993424317), (-2585.086993424317));
      assertEquals((-2585.086993424317), illinoisSolver0.getMax(), 0.01);
      assertEquals((-2585.086993424317), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      Signum signum0 = new Signum();
      double double0 = pegasusSolver0.solve(299, (UnivariateRealFunction) signum0, 0.0, (-1702.583055726637), (double) 2937);
      assertEquals((-1702.583055726637), pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2937, (UnivariateRealFunction) inverse0, (-3.6973056190304065E305), 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,937) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-948.0631664363017), (-948.0631664363017), (-948.0631664363017));
      Signum signum0 = new Signum();
      pegasusSolver0.solve(2147469420, (UnivariateRealFunction) signum0, (-948.0631664363017), (double) 2147469420, (-16.7213929483));
      pegasusSolver0.doSolve();
      // Undeclared exception!
      pegasusSolver0.doSolve();
  }
}

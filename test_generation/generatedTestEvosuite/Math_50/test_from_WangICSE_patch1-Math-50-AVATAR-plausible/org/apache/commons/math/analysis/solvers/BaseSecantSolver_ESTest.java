/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 18:23:18 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log1p;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.5);
      Ceil ceil0 = new Ceil();
      double double0 = regulaFalsiSolver0.solve(1851, (UnivariateRealFunction) ceil0, (-4059.031698541622), (double) 1851, (-1900.252367));
      assertEquals((-1900.252367), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-0.009927918873472663), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(1824, (UnivariateRealFunction) identity0, (-263.0932722), (double) 1932, 0.5, allowedSolution0);
      assertEquals(0.5, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Identity identity0 = new Identity();
      pegasusSolver0.solve(1932, (UnivariateRealFunction) identity0, (-0.7125565744799827), 1.589065757778922E-30, (-326.832161345));
      double double0 = pegasusSolver0.doSolve();
      assertEquals(1.589065757778922E-30, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      pegasusSolver0.solve(1294, (UnivariateRealFunction) sinc0, (-4.129274056636984), 2356.639730588029, 2356.639730588029, allowedSolution0);
      double double0 = pegasusSolver0.doSolve();
      assertEquals(2356.639730588029, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2356.1944902188025, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(740, 740);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      illinoisSolver0.solve(740, (UnivariateRealFunction) sinc0, (-1935.0), (-647.90117092517), allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals((-1291.450585462585), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-647.90117092517), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-905542), (UnivariateRealFunction) sinc0, (double) 885, (-1.0), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-905,542) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(128, (UnivariateRealFunction) sinc0, (double) 750, (-4274.003792), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [750, -4,274.004]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-354), (UnivariateRealFunction) null, (double) (-354), (double) (-354), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(422.88407981201, (-890.583806137293), 254872);
      Sinh sinh0 = new Sinh();
      // Undeclared exception!
      regulaFalsiSolver0.solve(254872, (UnivariateRealFunction) sinh0, (-1309.149062), 1245.0, 884.6517456222, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(58586203, (UnivariateRealFunction) identity0, (double) 58586203, (double) 58586203, (double) 58586203, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [58,586,203, 58,586,203]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(0, (UnivariateRealFunction) null, (-679.9242259029), (-679.9242259029), (-679.9242259029), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      Inverse inverse0 = new Inverse();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-1702.583055726637), 2.242E-320, (double) 2942);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,942) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4293.85886692912), (-4293.85886692912), (-4293.85886692912));
      Sinc sinc0 = new Sinc();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(749, (UnivariateRealFunction) sinc0, 4.396605282730955, (double) 749, 4.396605282730955);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (749) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(749, (UnivariateRealFunction) sinc0, (double) 749, (double) 749, (double) 749);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [749, 749]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(500, (UnivariateRealFunction) null, (double) 500, (double) 500, (double) 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4274.003792));
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(733);
      illinoisSolver0.setup(733, sinc0, 736.451807896421, 736.451807896421, 733);
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [736.452, 736.452]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log1p log1p0 = new Log1p();
      regulaFalsiSolver0.setup(1311, log1p0, (-1516.1999), 1311, 7.667604776646469E-9);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-1,516.2, 1,311], values: [\uFFFD, 7.179]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(801);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(801, (UnivariateRealFunction) sinc0, 4.57061105086917, (double) 801, allowedSolution0);
      assertEquals(402.7853055254346, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(800.5140266020741, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(26.458871689859308, 251);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(251, (UnivariateRealFunction) sinc0, 26.458871689859308, (double) 251, allowedSolution0);
      assertEquals(138.72943584492964, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(243.41918029563547, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-20.139919308817852), 251);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(251, (UnivariateRealFunction) sinc0, (-2.957007209750105E-8), 243.90940811118722, allowedSolution0);
      assertEquals((-2.957007209750105E-8), illinoisSolver0.getMin(), 0.01);
      assertEquals(243.0063066723259, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(740, (-21.132376225586352));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(5, (UnivariateRealFunction) sinc0, (-21.132376225586352), (double) 740, allowedSolution0);
      assertEquals((-21.132376225586352), illinoisSolver0.getMin(), 0.01);
      assertEquals(712.6515844979964, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(750, (UnivariateRealFunction) sinc0, 0.5, 419.62817056, 419.62817056, allowedSolution0);
      assertEquals(419.62817056, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(417.83182292744686, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(733, (-21.132376225586352));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(733, (UnivariateRealFunction) sinc0, (-21.132376225586352), (double) 733, allowedSolution0);
      assertEquals((-21.132376225586352), illinoisSolver0.getMin(), 0.01);
      assertEquals((-21.132376225586352), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(733, (-21.13237622558635));
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(733, (UnivariateRealFunction) sinc0, (-21.13237622558635), (double) 733, allowedSolution0);
      assertEquals((-21.13237622558635), illinoisSolver0.getMin(), 0.01);
      assertEquals(709.455084537734, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(801, (UnivariateRealFunction) sinc0, 4.57061105086917, (double) 801, allowedSolution0);
      assertEquals(402.7853055254346, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(797.9645340118079, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-20.139919308817852));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(3203, (UnivariateRealFunction) sinc0, (-20.139919308817852), (double) 3203, allowedSolution0);
      assertEquals(1591.4300403455911, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3182.433358086461, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(88, (UnivariateRealFunction) sinc0, (-4.129274056636984), 0.5, (-290.91808891509856), allowedSolution0);
      assertEquals((-290.91808891509856), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3.1415926535897936), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(69070, (UnivariateRealFunction) sinc0, (-2112.356857), 1299.145791496, allowedSolution0);
      assertEquals((-406.6055327520003), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1278.628209466537, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(631, (UnivariateRealFunction) sinc0, 1083.8655858428715, 8.0E298, (-3.1415926535897936), allowedSolution0);
      assertEquals((-3.1415926535897936), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(7.072166007493105E298, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      double double0 = pegasusSolver0.solve(755, (UnivariateRealFunction) sinc0, (-1921.967297605305), (double) 755, (double) 755);
      assertEquals(755.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1913.229926036184), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4274.003792));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(407832762, (UnivariateRealFunction) tanh0, (-1958.3916250785298), 0.75, allowedSolution0);
      assertEquals((-978.8208125392649), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      Ceil ceil0 = new Ceil();
      double double0 = illinoisSolver0.solve(3, (UnivariateRealFunction) ceil0, (double) 3, (-2.8278676508142184E-11), allowedSolution0);
      assertEquals(3.0, illinoisSolver0.getMin(), 0.01);
      assertEquals((-2.8278676508142184E-11), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1991.46053001949, (-7.701483583618114E-16));
      Gaussian gaussian0 = new Gaussian(95322323, 1991.46053001949);
      double double0 = pegasusSolver0.solve(95322323, (UnivariateRealFunction) gaussian0, (-7.701483583618114E-16), (double) 95322323, (-7.701483583618114E-16));
      assertEquals((-7.701483583618114E-16), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-7.701483583618114E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(631, (UnivariateRealFunction) sinc0, 1083.8655858428715, 8.0E298, (-3.1415926535897936), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (631) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      regulaFalsiSolver0.solve(749, (UnivariateRealFunction) sinc0, 4.945479099852256, (double) 749, 4.945479099852256);
  }
}

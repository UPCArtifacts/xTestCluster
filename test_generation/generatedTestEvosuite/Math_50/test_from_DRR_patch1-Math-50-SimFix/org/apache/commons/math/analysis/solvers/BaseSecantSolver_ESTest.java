/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:17:12 GMT 2021
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Constant;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Power;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      Logit logit0 = new Logit(1384, 1384);
      assertNotNull(logit0);
      
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      assertNotNull(univariateRealFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(1384, univariateRealFunction0, 0.0, 0.008333333333329196, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.004166666666664598, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.008333333333329196, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(64.549218651, (-1969.112842787287));
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(64.549218651, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1969.112842787287), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      Sigmoid sigmoid0 = new Sigmoid(0.0, 0.0);
      assertNotNull(sigmoid0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(178, (UnivariateRealFunction) sigmoid0, 2.7045E-320, 2.816E-321, (double) 178, allowedSolution0);
      assertEquals(2.7045E-320, double0, 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(64.549218651, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1969.112842787287), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(178.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.7045E-320, pegasusSolver0.getMin(), 0.01);
      assertEquals(2.816E-321, pegasusSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      double double0 = pegasusSolver0.solve(2159, (UnivariateRealFunction) inverse0, (-4210.6), 0.036, 0.0);
      assertEquals((-1.575584711959634E-10), double0, 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-4210.6), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.036, pegasusSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792));
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-4274.003792), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-4274.003792), regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double0 = regulaFalsiSolver0.solve(750, (UnivariateRealFunction) sinc0, 4.396605282730955, (double) 750, 4.396605282730955);
      assertEquals(747.6990515543708, double0, 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-4274.003792), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4.396605282730955, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-4274.003792), regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(750.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(4.396605282730955, regulaFalsiSolver0.getMin(), 0.01);
      
      double double1 = regulaFalsiSolver0.doSolve();
      assertEquals(747.6990515543708, double1, 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-4274.003792), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4.396605282730955, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-4274.003792), regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(750.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(4.396605282730955, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2238.0, 2238.0, 2238.0);
      assertNotNull(illinoisSolver0);
      assertEquals(2238.0, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2238.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2238.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      
      double[] doubleArray0 = new double[1];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-2083), (UnivariateRealFunction) polynomialFunction0, (-2083.0), 2238.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,083) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-900.3061323134925), (-1.0));
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-1.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-900.3061323134925), regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      
      Constant constant0 = new Constant(1.0E-6);
      assertNotNull(constant0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1668, (UnivariateRealFunction) constant0, 27.77777777777778, (double) 1668, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [27.778, 1,668], values: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1, (UnivariateRealFunction) cbrt0, (double) 1, (double) 1, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2942, (-1249.332), (-1249.332));
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(2942.0, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1249.332), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-1249.332), illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(883, (UnivariateRealFunction) inverse0, (double) 883, 1.1395106317984213E-6, (double) 883, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [883, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1335.812));
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1335.812), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(5, (UnivariateRealFunction) null, (double) 5, 2136.011743120646, 6.344780561308204E-307, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-948.3726181), 0.036, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,942) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      
      Exp exp0 = new Exp();
      assertNotNull(exp0);
      
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(0, (UnivariateRealFunction) exp0, (-1466.4202156090378), 193.0, (-1466.4202156090378));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-948.3726181), (-1702.583055726637), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-948.373, -1,702.583]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(257, 257, 257);
      assertNotNull(pegasusSolver0);
      assertEquals(257.0, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(257.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(257.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(305, (UnivariateRealFunction) null, 1.0E-6, (double) 257, 2124.88851501029);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1335.812));
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals((-1335.812), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2147483645, (UnivariateRealFunction) inverse0, (-570.9353321892518), 1.0, allowedSolution0);
      assertEquals((-1.809349738840188E-7), double0, 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-570.9353321892518), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-284.9676660946259), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0, regulaFalsiSolver0.getMax(), 0.01);
      
      double double1 = regulaFalsiSolver0.doSolve();
      assertEquals((-1.809349738840188E-7), double1, 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-570.9353321892518), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-284.9676660946259), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2147483645, (UnivariateRealFunction) inverse0, (-570.9353321892518), 1.0, allowedSolution0);
      assertEquals(6.403965972044336E-7, double0, 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-284.9676660946259), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-570.9353321892518), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0, regulaFalsiSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2097, (UnivariateRealFunction) inverse0, (-1249.332), 1.0, (double) 2097, allowedSolution0);
      assertEquals((-9.292944831934972E-8), double0, 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-1249.332), pegasusSolver0.getMin(), 0.01);
      assertEquals(2097.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(750, (UnivariateRealFunction) sinc0, 1.0, 747.6990498707735, allowedSolution0);
      assertEquals(374.34952493538674, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(744.557458900781, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351);
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-948.3726181), 4.58066378482456E-307, (-7.16589238359489E305), allowedSolution0);
      assertEquals((-7.16589238359489E305), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0, 1.0);
      Power power0 = new Power((-1335.812));
      double double0 = pegasusSolver0.solve(2121, (UnivariateRealFunction) power0, (-1335.812), 910.5418709772669, 910.5418709772669);
      assertEquals(910.5418709772669, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(910.5418709772669, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(750, (UnivariateRealFunction) sinc0, 4.396605282730955, 2.4125638965442985E-5, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [4.397, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }
}

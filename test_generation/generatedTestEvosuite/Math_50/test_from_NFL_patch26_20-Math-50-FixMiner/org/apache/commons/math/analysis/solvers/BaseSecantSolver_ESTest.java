/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:48:12 GMT 2021
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Abs;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log1p;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Logit logit0 = new Logit(1384, 1384);
      assertNotNull(logit0);
      
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      assertNotNull(univariateRealFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(1384, univariateRealFunction0, 0.0, 0.008333333333329196, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.004166666666664598, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.008333333333329196, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0, 1.0, 2.759717970480763);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2.759717970480763, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      double double0 = pegasusSolver0.solve(4868, (UnivariateRealFunction) tan0, (-1513.2324), (double) 4868, (double) 4868);
      assertEquals((-608.5693148972023), double0, 0.01);
      assertEquals((-1513.2324), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(4868.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2.759717970480763, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(4868.0, pegasusSolver0.getMax(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals((-608.5693148972023), double1, 0.01);
      assertEquals((-1513.2324), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(4868.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2.759717970480763, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(4868.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4.623151389696911E-10));
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-4.623151389696911E-10), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      Log1p log1p0 = new Log1p();
      assertNotNull(log1p0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2, (UnivariateRealFunction) log1p0, (-4.623151389696911E-10), 2971.6, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.2924697071141057E-26);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.2924697071141057E-26, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(illinoisSolver0);
      
      Identity identity0 = new Identity();
      assertNotNull(identity0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(507997713, (UnivariateRealFunction) identity0, (double) 507997713, (double) 507997713, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [507,997,713, 507,997,713]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0, 1.0, 1.0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertNotNull(illinoisSolver0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(66, (UnivariateRealFunction) null, 0.5, 1.0, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1, (UnivariateRealFunction) cbrt0, (double) 1, (double) 1, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.4256137493028051E-6, 1.4256137493028051E-6);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.4256137493028051E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.4256137493028051E-6, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      Sigmoid sigmoid0 = new Sigmoid();
      assertNotNull(sigmoid0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2941459, (UnivariateRealFunction) sigmoid0, 1.4256137493028051E-6, 1.4256137493028051E-6, 58.35903964, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1335.812));
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1335.812), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(5, (UnivariateRealFunction) null, (double) 5, 2136.011743120646, 6.344780561308204E-307, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2147479282, (-4.623151389696911E-10));
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2.147479282E9, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-4.623151389696911E-10), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Sigmoid sigmoid0 = new Sigmoid((-728.0), 1.9868161777724352E-8);
      assertNotNull(sigmoid0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2147479282, (UnivariateRealFunction) sigmoid0, (-7005.5659441672), 338.1651100302, (-728.0), (AllowedSolution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseSecantSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(illinoisSolver0);
      
      Abs abs0 = new Abs();
      assertNotNull(abs0);
      
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2485, (UnivariateRealFunction) abs0, (double) 2485, 1.1980413566472311E-83, (double) 2485);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2,485, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4.623151389696911E-10));
      assertEquals((-4.623151389696911E-10), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      Exp exp0 = new Exp();
      assertNotNull(exp0);
      
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2146460046, (UnivariateRealFunction) exp0, (-227.47756), (-2.4940057949387232E-6), (double) 2146460046);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-227.478, -0], values: [0, 1]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792));
      assertEquals((-4274.003792), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-4274.003792), regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2146980724, (UnivariateRealFunction) inverse0, (-1.1914680776940667E-6), 119.23867989962321, allowedSolution0);
      assertEquals(119.23867870815513, double0, 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(59.61933935407756, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(119.23867989962321, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1.1914680776940667E-6), pegasusSolver0.getMin(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-4.623151389696911E-10));
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-4.623151389696911E-10), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Sigmoid sigmoid0 = new Sigmoid((-728.0), 1.9868161777724352E-8);
      assertNotNull(sigmoid0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2147479279, (UnivariateRealFunction) sigmoid0, (-7005.678103091858), 338.1651100302, (-728.0), allowedSolution0);
      assertEquals(24.324449797933553, double0, 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-728.0), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-7005.678103091858), pegasusSolver0.getMin(), 0.01);
      assertEquals((-4.623151389696911E-10), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(338.1651100302, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351, 901.4550351, 901.4550351);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(5300, (UnivariateRealFunction) inverse0, (-0.1859949658066375), 0.1859949658066375, 901.4550351, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(901.4550351, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.1859949658066375, pegasusSolver0.getMax(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-0.1859949658066375), pegasusSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(69, (UnivariateRealFunction) inverse0, (-1242.6668332140725), (double) 69, (-4581.34437768), allowedSolution0);
      assertEquals((-722.6078048896196), double0, 0.01);
      assertEquals(69.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-4581.34437768), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1242.6668332140725), pegasusSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-4.623151389696911E-10));
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4.623151389696911E-10), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Sigmoid sigmoid0 = new Sigmoid((-728.0), 1.9868161777724352E-8);
      assertNotNull(sigmoid0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2147479279, (UnivariateRealFunction) sigmoid0, 1.9868161777724352E-8, 338.1651100302, (-728.0), allowedSolution0);
      assertEquals(24.324449797933614, double0, 0.01);
      assertEquals(1.9868161777724352E-8, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-728.0), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4.623151389696911E-10), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(338.1651100302, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1061.27, 901.4550351, 3.769779746844558);
      assertEquals(3.769779746844558, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1061.27, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1727, (UnivariateRealFunction) inverse0, (-9.523082430763069E-6), 0.5, (-1078.0), allowedSolution0);
      assertEquals(0.49999047691756926, double0, 0.01);
      assertEquals(3.769779746844558, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.5, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1078.0), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1061.27, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-9.523082430763069E-6), pegasusSolver0.getMin(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals(0.49999047691756926, double1, 0.01);
      assertEquals(3.769779746844558, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.5, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1078.0), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1061.27, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-9.523082430763069E-6), pegasusSolver0.getMin(), 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351, 901.4550351, 901.4550351);
      assertEquals(901.4550351, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(3606, (UnivariateRealFunction) inverse0, (-2.9334076173966155E-16), 876.1192991568, (-2.7366680030529683E-26), allowedSolution0);
      assertEquals(876.1192991568, double0, 0.01);
      assertEquals(901.4550351, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-2.7366680030529683E-26), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(876.1192991568, pegasusSolver0.getMax(), 0.01);
      assertEquals((-2.9334076173966155E-16), pegasusSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351, 901.4550351, 901.4550351);
      assertEquals(901.4550351, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(3, (UnivariateRealFunction) inverse0, (-1173.6668332140723), (double) 69, allowedSolution0);
      assertEquals(69.0, double0, 0.01);
      assertEquals((-1173.6668332140723), pegasusSolver0.getMin(), 0.01);
      assertEquals(69.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-552.3334166070362), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351, 901.4550351, 901.4550351);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(3, (UnivariateRealFunction) inverse0, (-2023.777), 38.960141838088, allowedSolution0);
      assertEquals(38.960141838088, double0, 0.01);
      assertEquals(901.4550351, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-992.408429080956), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2023.777), pegasusSolver0.getMin(), 0.01);
      assertEquals(38.960141838088, pegasusSolver0.getMax(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351, 901.4550351, 901.4550351);
      assertEquals(901.4550351, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      double double0 = pegasusSolver0.solve(36, (UnivariateRealFunction) tan0, (-407.28), 901.4550351, (-407.28));
      assertEquals(796.1396194768167, double0, 0.01);
      assertEquals(901.4550351, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getMax(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-407.28), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-407.28), pegasusSolver0.getMin(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792), (-4274.003792));
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-4274.003792), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-4274.003792), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-4274.003792), regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(750, (UnivariateRealFunction) sinc0, 4.396605282730955, (double) 750, 4.396605282730955);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (750) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(4868, 981.107, 1.0E-6);
      assertEquals(1.0E-6, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(981.107, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4868.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(361, (UnivariateRealFunction) tan0, (-2695.9368813048), 981.107, allowedSolution0);
      assertEquals((-2695.9368813048), double0, 0.01);
      assertEquals(981.107, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-2695.9368813048), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-857.4149406524), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(981.107, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4868.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double0 = pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-948.3726181), 0.036, 0.0);
      assertEquals((-1.0161510292631814E-7), double0, 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.036, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-948.3726181), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-4616.3), (-4616.3));
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-4616.3), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4616.3), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Exp exp0 = new Exp();
      assertNotNull(exp0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) exp0, (-4616.3), 5795.633, (-414.81342761423), allowedSolution0);
      assertEquals((-4616.3), double0, 0.01);
      assertEquals((-4616.3), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-414.81342761423), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(5795.633, pegasusSolver0.getMax(), 0.01);
      assertEquals((-4616.3), pegasusSolver0.getMin(), 0.01);
      assertEquals((-4616.3), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(901.4550351, 901.4550351, 901.4550351);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(3, (UnivariateRealFunction) inverse0, (-1173.6668332140723), (double) 69, allowedSolution0);
      assertEquals((-1104.6668332140723), double0, 0.01);
      assertEquals((-1173.6668332140723), pegasusSolver0.getMin(), 0.01);
      assertEquals((-552.3334166070362), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(69.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(901.4550351, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-9.322095041933063E11), (-9.322095041933063E11));
      assertEquals((-9.322095041933063E11), illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-9.322095041933063E11), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertNotNull(illinoisSolver0);
      
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(792, (UnivariateRealFunction) tanh0, (-9.322095041933063E11), (double) 792, 1491.508, allowedSolution0);
      assertEquals((-2.933407634069475E-16), double0, 0.01);
      assertEquals(1491.508, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-9.322095041933063E11), illinoisSolver0.getMin(), 0.01);
      assertEquals((-9.322095041933063E11), illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-9.322095041933063E11), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(792.0, illinoisSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2.7279126074393474E-6), 2.6306111067242455E-8, (-2.7279126074393474E-6));
      Tan tan0 = new Tan();
      pegasusSolver0.solve(4868, (UnivariateRealFunction) tan0, (-2.7279126074393474E-6), 2.6306111067242455E-8, (-2.7279126074393474E-6));
      double double0 = pegasusSolver0.doSolve();
      assertEquals(2.6306111067242455E-8, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Gaussian gaussian0 = new Gaussian();
      pegasusSolver0.solve(4523, (UnivariateRealFunction) gaussian0, 0.5, (-2134.10585), (-8.047209221908406E-4));
  }
}
